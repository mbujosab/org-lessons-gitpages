
Fichero =makefile= que genera el directorio pÃºblico =docs= con los ficheros para GitPages con subdirectorios para los =CuadernosElectronicos=, =pdfs=, =Transparencias= y los ficheros con las lecciones en ~html~:

#+BEGIN_SRC makefile :noweb no-export :results silent :exports none :tangle makefile
LECCIONES_SRC = ./org-lessons
LECCIONES_tmp = ./lecciones
DOCS = ./docs
CUADERNOS = $(DOCS)/CuadernosElectronicos
TRANSPARENCIAS = $(DOCS)/Transparencias

SRC_FILES = $(LECCIONES_SRC)/Lecc*.org

.PHONY: all clean cleanAll directorios series_formales calendario notebooksYslides

all: calendario notebooksYslides publicacion

calendario: $(DOCS)/Calendario-Econometria-Aplicada.pdf

$(DOCS)/Calendario-Econometria-Aplicada.pdf:
	emacs --batch Calendario/README.org -l org -f org-babel-tangle
	cd Calendario && make Calendario-Econometria-Aplicada.pdf

publicacion: notebooksYslides
	echo "FICHEROS EN CuadernosElectronicos y Transparencias?..."
	mv $(LECCIONES_tmp)/Lecc*.slides.html $(TRANSPARENCIAS)
	ls $(CUADERNOS)
	ls $(TRANSPARENCIAS)
	echo "EJECUCIÃ“N DE publica.el..."
	emacs --batch \
	  --load ~/.emacs.d/no-tlmgr.el \
	  --load ~/Software/scimax/init.el \
	  -l publica.el
	echo "FICHEROS EN Docs?..."
	ls $(DOCS)
	ls $(DOCS)/pdfs

notebooksYslides: $(patsubst $(LECCIONES_SRC)/%.org,$(CUADERNOS)/%.ipynb,$(wildcard $(SRC_FILES)))
	touch $@

$(CUADERNOS)/%.ipynb $(TRANSPARENCIAS)/%.slides.html: $(LECCIONES_SRC)/%.org
	make directorios
	make series_formales
	cp -a $(LECCIONES_SRC)/*.bib $(LECCIONES_tmp)
	cp -a $< $(LECCIONES_tmp)
	echo "EJECUCION DEL NOTEBOOK DE ORG: $(LECCIONES_tmp)/$(@F:.ipynb=.org)..."
	emacs -Q -l ~/Software/scimax/init.el $(LECCIONES_tmp)/$(@F:.ipynb=.org) --batch --eval "(org-babel-expand-noweb-references)" --eval "(org-babel-execute-buffer)" --eval "(save-buffer)" --kill
	#emacs -Q -l ~/Software/scimax/init.el $(LECCIONES_tmp)/$(@F:.ipynb=.org) --batch --eval "(setq org-confirm-babel-evaluate nil)" --eval "(org-babel-execute-buffer)" --eval "(save-buffer)" --kill
	#emacs -q -l ~/Software/scimax/init.el $(LECCIONES_tmp)/$(@F:.ipynb=.org) --batch -f org-babel-execute-buffer --kill
	echo "FICHEROS EN ./lecciones?..."
	ls $(LECCIONES_tmp)
	echo "FICHEROS IMG?..."
	ls $(LECCIONES_tmp)/img
	echo "FICHEROS EN ./docs/imgs?..."
	cp -a $(LECCIONES_tmp)/img $(DOCS)/
	ls $(DOCS)/img
	ls $(DOCS)/img/lecc01
	echo "Contenido de img tras notebook:"
	find $(LECCIONES_tmp)/img
	echo "COPIO LO QUE SE HA GENERADO (.ipynb sin ejecutar y las imÃ¡genes) A /docs..."
	cp -a $(LECCIONES_tmp)/$(@F) $(CUADERNOS)
	cp -a $(LECCIONES_tmp)/img $(DOCS)/
	cp -a $(LECCIONES_tmp)/$(@F:.ipynb=.org) $(DOCS)/
	ln -snf -r $(DOCS)/img/ $(TRANSPARENCIAS)/
	ln -snf -r $(DOCS)/img/ $(CUADERNOS)/
#	# Ejecutar el notebook con jupyter nbconvert
	echo "EJECUCION DEL NOTEBOOK DE JUPYTER..."
	jupyter nbconvert --execute --inplace $(LECCIONES_tmp)/$(@F) 
	echo "CREACIÃ“N DE LAS SLIDES..."
	jupyter nbconvert --config mycfg-GitHubPages.py --to slides --reveal-prefix "https://unpkg.com/reveal.js@5.2.1" --execute $(LECCIONES_tmp)/$(@F) 
	echo "FICHEROS EN Docs ANTES DE PUBLICAR?..."
	ls $(DOCS)


series_formales: $(LECCIONES_tmp)/src/implementacion_series_formales.org

$(LECCIONES_tmp)/src/implementacion_series_formales.org: $(LECCIONES_SRC)/src/implementacion_series_formales.org
	echo "INICIO IMPLEMENTACION_SERIES_FORMALES.ipynb..."
	make directorios
	cp $< $(LECCIONES_tmp)/src/
	emacs -q --batch $(LECCIONES_tmp)/src/implementacion_series_formales.org -l org -f org-babel-tangle
	cp -a $(LECCIONES_tmp)/src/implementacion_series_formales.py $(CUADERNOS)/src/
	ln -sf -r $(CUADERNOS)/src/implementacion_series_formales.py $(CUADERNOS)/
	emacs -q --batch \
	  --load ~/.emacs.d/no-tlmgr.el \
	  --load ~/Software/scimax/init.el \
	  --eval "(require 'ox-ipynb)" \
	  --eval "(ox-ipynb-export-org-file-to-ipynb-file \"lecciones/src/implementacion_series_formales.org\")"
	jupyter nbconvert --execute --inplace $(LECCIONES_tmp)/src/implementacion_series_formales.ipynb
	jupyter nbconvert --config mycfg-GitHubPages.py --to slides --reveal-prefix "https://unpkg.com/reveal.js@5.2.1" --execute $(LECCIONES_tmp)/src/implementacion_series_formales.ipynb
	jupyter nbconvert --execute --to html $(LECCIONES_tmp)/src/implementacion_series_formales.ipynb
	mv $(LECCIONES_tmp)/src/implementacion_series_formales.ipynb $(CUADERNOS)
	mv $(LECCIONES_tmp)/src/implementacion_series_formales.slides.html $(TRANSPARENCIAS)
	mv $(LECCIONES_tmp)/src/implementacion_series_formales.html $(DOCS)
	echo "TERMINADO IMPLEMENTACION_SERIES_FORMALES.ipynb..."

directorios:
	mkdir -v -p $(LECCIONES_tmp)/src
	mkdir -v -p $(LECCIONES_tmp)/img
	ln -snf -r ./css/ $(LECCIONES_tmp)/
	mkdir -v -p $(DOCS)/img
	mkdir -v -p $(DOCS)/pdfs
	mkdir -v -p $(TRANSPARENCIAS)
	mkdir -v -p $(CUADERNOS)/src
	touch directorios

clean:
	rm -r -f $(LECCIONES_tmp)

cleanAll: clean
	find $(DOCS)/ -mindepth 1 ! -name 'README.org' -exec rm -rf {} +
	rm -f directorios
	rm -f series_formales
	rm -f publicacion
#+END_SRC

Makefile para que sea totalmente compatible con el build.yml que definimos. Los cambios clave son:

Se utiliza emacs --batch con --load ~/.emacs.d/no-tlmgr.el para evitar el problema con tlmgr.

Se asegura que ox-ipynb y ob-jupyter se cargan explÃ­citamente.

Se evita la evaluaciÃ³n de bloques automÃ¡ticamente, salvo en los casos que lo necesitas.

Se mantiene toda tu lÃ³gica de directorios, copias, y nbconvert.


$(CUADERNOS)/%.ipynb $(TRANSPARENCIAS)/%.slides.html: $(LECCIONES_SRC)/%.org
	make directorios
	make series_formales
	cp -a $(LECCIONES_SRC)/*.bib $(LECCIONES)
	cp -a $< $(LECCIONES)
	emacs --batch \
	  --load ~/.emacs.d/no-tlmgr.el \
	  --load ~/Software/scimax/init.el \
	  --eval "(setq org-confirm-babel-evaluate nil)" \
	  --eval "(require 'ox-ipynb)" \
	  --eval "(require 'ob-jupyter)" \
	  $(LECCIONES)/$(@F:.ipynb=.org) \
	  -f org-babel-execute-buffer --kill
	mv $(LECCIONES)/$(@F:.ipynb=.ipynb) $(CUADERNOS)
	mv $(LECCIONES)/$(@F:.ipynb=.slides.html) $(TRANSPARENCIAS)

$(CUADERNOS)/%.ipynb $(TRANSPARENCIAS)/%.slides.html: $(LECCIONES_SRC)/%.org
	make directorios
	make series_formales
	cp -a $(LECCIONES_SRC)/*.bib $(LECCIONES)
	cp -a $< $(LECCIONES)
	emacs --batch \
	  --load ~/.emacs.d/no-tlmgr.el \
	  --load ~/Software/scimax/init.el \
	  --eval "(require 'ox-ipynb)" \
	  --eval "(org-babel-execute-buffer)" \
	  $(LECCIONES)/$(@F:.ipynb=.org) \
	  -f org-babel-execute-buffer --kill
	mv $(LECCIONES)/$(@F:.ipynb=.ipynb) $(CUADERNOS)
	mv $(LECCIONES)/$(@F:.ipynb=.slides.html) $(TRANSPARENCIAS)

#	#emacs -q -l ~/Software/scimax/init.el $(LECCIONES)/$(@F:.ipynb=.org) --batch -f org-babel-execute-buffer --kill


Este script transforma los ficheros org de las lecciones en pdfs y htmls. 

#+BEGIN_SRC  emacs-lisp :tangle publica.el :results silent
;;; publica.el --- PublicaciÃ³n HTML y PDF para el repositorio Scimax-ELN

(require 'ox-publish)

(setq org-confirm-babel-evaluate nil
      org-export-with-broken-links t
      org-html-validation-link nil
      org-html-head-include-scripts nil
      org-html-head-include-default-style nil)

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF tras ejecutar bloques de cÃ³digo."
  (message "Exportando a PDF: %s" filename)
  (with-current-buffer (find-file-noselect filename)
    ;(org-babel-execute-buffer)
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/"))
  (setq org-publish-project-alist
        `(("images"
           :base-directory "./lecciones/img/"
           :base-extension "jpg\\|gif\\|png"
           :publishing-directory ,(concat public-directory "img")
           :publishing-function org-publish-attachment)

          ("html"
           :base-directory ,base-directory
           :base-extension "org"
           :publishing-directory ,public-directory
           :exclude "src"
           :recursive t
           :publishing-function org-html-publish-to-html
           :auto-preamble t)

          ("pdf"
           :base-directory ,base-directory
           :base-extension "org"
           :publishing-directory ,(concat public-directory "pdfs")
           :exclude "src"
           :recursive t
           :publishing-function my-org-latex-publish-to-pdf
           :auto-preamble t)

          ("static-html"
           :base-directory ,base-directory
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|txt\\|svg\\|aiff\\|csv\\|gdt\\|inp"
           :publishing-directory ,public-directory
           :exclude "src"
           :recursive t
           :publishing-function org-publish-attachment)

          ("scimax-eln" :components ("html" "static-html" "pdf" "images"))))

  (message "ðŸŸ¢ Iniciando publicaciÃ³n de lecciones (scimax-eln)...")
  (org-publish "scimax-eln" t)
  (message "âœ… PublicaciÃ³n de lecciones completada."))

(let* ((base-directory "./"))
  (setq org-publish-project-alist
        (append org-publish-project-alist
                `(("index"
                   :base-directory ,base-directory
                   :base-extension "org"
                   :publishing-directory ,(concat base-directory "docs")
                   :exclude "docs\\|chatCopilot.org\\|org-publisg.org"
                   :recursive nil
                   :publishing-function org-html-publish-to-html
                   :auto-preamble t
                   :auto-sitemap t
                   :with-author nil
                   :with-creator nil
                   :with-toc t
                   :section-numbers nil)

                  ("static-index"
                   :base-directory ,base-directory
                   :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|txt\\|svg\\|aiff"
                   :publishing-directory ,(concat base-directory "docs")
                   :exclude "lecciones\\|chatCopilot.*\\|org-publisg.*"
                   :recursive nil
                   :publishing-function org-publish-attachment)

                  ("web-repositorio" :components ("index" "static-index")))))

  (message "ðŸŸ¢ Iniciando publicaciÃ³n del Ã­ndice (web-repositorio)...")
  (org-publish "web-repositorio" t)
  (message "âœ… PublicaciÃ³n del Ã­ndice completada."))

(unless (file-directory-p "logs")
  (make-directory "logs"))
(with-temp-file "logs/publica.log"
  (insert (format "Publicado el %s\n" (current-time-string))))

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle publica.el.old :results silent
(require 'ox-publish)

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF despuÃ©s de ejecutar los bloques de cÃ³digo."
  (with-current-buffer (find-file-noselect filename)
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
				     :base-directory ,base-directory
				     :base-extension "org"
                                     :publishing-directory ,public-directory
				     :exclude "src\\|docs\\|Calendario"
				     :recursive t
				     :publishing-function org-html-publish-to-html
				     :auto-preamble t
				     :auto-sitemap nil)
				    
				    ("pdf"
				     :base-directory ,base-directory
				     :base-extension "org"
				     :publishing-directory ,(concat public-directory "pdfs")
 				     :exclude "src\\|docs\\|Calendario"
				     :recursive t
				     :publishing-function my-org-latex-publish-to-pdf
				     :auto-preamble t
				     :auto-sitemap nil)
				    
				    ("static-html"
				     :base-directory ,base-directory
				     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|txt\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb"
				     :publishing-directory ,public-directory
				     :exclude "src\\|docs\\|Calendario"
				     :recursive t
				     :publishing-function org-publish-attachment)

				    ;; ... all the components ...
				    ("scimax-eln" :components ("html" "static-html" "pdf")))))

  (org-publish "scimax-eln" t))

  ;; Customize the HTML output
  (setq org-html-validation-link nil            ;; Don't show validation link
        org-html-head-include-scripts nil       ;; Use our own scripts
        org-html-head-include-default-style nil ;; Use our own styles
        ;org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />"
   )

  (let* ((base-directory "./")
         (org-export-with-broken-links t)
         (org-publish-project-alist `(("index"
  				     :base-directory ,base-directory
  				     :base-extension "org"
  				     :publishing-directory ,(concat base-directory "docs")
  				     :exclude "docs"
  				     :recursive nil
  				     :publishing-function org-html-publish-to-html
  				     :auto-preamble t
  				     :auto-sitemap t
                                       :with-author nil           ;; Don't include author name
                                       :with-creator nil          ;; Include Emacs and Org versions in footer
                                       :with-toc t                ;; Include a table of contents
                                       :section-numbers nil       ;; Don't include section numbers
                                       :time-stamp-file nil)
  				    
  				    ("static-index"
  				     :base-directory ,base-directory
  				     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|txt\\|svg\\|aiff"
  				     :publishing-directory ,(concat base-directory "docs")
  				     :exclude "docs"
  				     :recursive nil
  				     :publishing-function org-publish-attachment)

  				    ;; ... all the components ...
  				    ;("scimax-eln" :components ("html" "static-html" "pdf")))))
  				    ("web-repositorio" :components ("index" "static-index")))))

    (org-publish "web-repositorio" t))
#+END_SRC


#+BEGIN_SRC emacs-lisp
(require 'ox-publish)

(defun my-org-babel-execute-buffer ()
  "Ejecuta todos los bloques de cÃ³digo en el buffer actual."
  (org-babel-execute-buffer))

(defun my-org-html-publish-to-html (plist filename pub-dir)
  "Publica un archivo Org como HTML despuÃ©s de ejecutar los bloques de cÃ³digo."
  (with-current-buffer (find-file-noselect filename)
    ;(my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-html-publish-to-html plist filename pub-dir)))

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF despuÃ©s de ejecutar los bloques de cÃ³digo."
  (with-current-buffer (find-file-noselect filename)
    ;(my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,public-directory
                                     :exclude ".ipynb_checkpoints\\|00Notas.*\\|org-publisg.*\\|kk.*\\|src"
                                     :recursive t
                                     :auto-preamble t
                                     :auto-sitemap t
				     :sitemap-title "Lecciones"
                                     :publishing-function my-org-html-publish-to-html
    				     :exclude-tags ("pdf"))
                                   
                                    ("pdf"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,(concat public-directory "pdfs")
                                     :exclude ".ipynb_checkpoints\\|src\\|sitemap.pdf"
                                     :recursive t
                                     :auto-preamble t
                                     :auto-sitemap nil
                                     :publishing-function my-org-latex-publish-to-pdf)
                                    
                                    ("static-html"
                                     :base-directory ,base-directory
                                     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb\\|html"
                                     :publishing-directory ,public-directory
                                     :exclude "docs\\|src\\|EjerciciosHide\\|.ipynb_checkpoints\\|org-publisg.*\\|kk.*\\|Lecc*.pdf\\|sitemap.pdf"
                                     :recursive t
                                     :publishing-function org-publish-attachment)

                                    ("scimax-eln" :components ("html" "static-html" "pdf")))))

  (org-publish "scimax-eln" t))

  ;; Customize the HTML output
  (setq org-html-validation-link nil            ;; Don't show validation link
        org-html-head-include-scripts nil       ;; Use our own scripts
        org-html-head-include-default-style nil ;; Use our own styles
        org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />")

  (let* ((base-directory "./")
         (org-export-with-broken-links t)
         (org-publish-project-alist `(("index"
  				     :base-directory ,base-directory
  				     :base-extension "org"
  				     :publishing-directory ,(concat base-directory "docs")
  				     :exclude "docs\\|org-publisg.org\\|chatCopilot.org"
  				     :recursive nil
  				     :publishing-function org-html-publish-to-html
  				     :auto-preamble t
  				     :auto-sitemap t
                                       :with-author nil           ;; Don't include author name
                                       :with-creator nil          ;; Include Emacs and Org versions in footer
                                       :with-toc t                ;; Include a table of contents
                                       :section-numbers nil       ;; Don't include section numbers
                                       :time-stamp-file nil)
  				    
  				    ("static-index"
  				     :base-directory ,base-directory
  				     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|txt\\|svg\\|aiff"
  				     :publishing-directory ,(concat base-directory "docs")
  				     :exclude "docs\\|org-publisg.org\\|chatCopilot.org"
  				     :recursive nil
  				     :publishing-function org-publish-attachment)

  				    ;; ... all the components ...
  				    ;("scimax-eln" :components ("html" "static-html" "pdf")))))
  				    ("web-repositorio" :components ("index" "static-index")))))

    (org-publish "web-repositorio" t))

#+END_SRC

#+RESULTS:


Podemos chequear la versiÃ³n local ejecutando el siguiente bloque

#+BEGIN_SRC emacs-lisp :results silent
(browse-url "docs/index.html")
#+END_SRC



* slides para GitHubpages


[[https://nbconvert.readthedocs.io/en/latest/config_options.html][ConfiguraciÃ³n para nbconvert]] (las slides usan ficheros de la web para poder funcionar en GitHubPages)

[[https://dbafromthecold.com/2021/02/21/creating-presentations-with-reveal-and-github-pages/][creating-presentations-with-reveal-and-github-pages]]

https://github.com/RichardAfolabi/Presentation_js

https://emasuriano.com/til/2024-07-01-create-presentations-from-notebook/

https://github.com/yjwen/org-reveal
https://github.com/hexmode/ox-reveal

#+BEGIN_SRC python :tangle mycfg-GitHubPages.py
c = get_config()

c.SlidesExporter.reveal_theme = 'solarized'
c.SlidesExporter.reveal_scroll = True
c.SlidesExporter.language_code = 'es'

c.SlidesExporter.mathjax_url = "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"

c.SlidesExporter.jquery_url = "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"

c.SlidesExporter.require_js_url = "https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js"
#+END_SRC


* COMMENT Ã‘ordas

#+BEGIN_SRC sh :results silent
jupyter nbconvert --config mycfg-GitHubPages.py --to slides --reveal-prefix reveal.js --no-input
#+END_SRC


#+BEGIN_SRC emacs-lisp
(require 'ox-ipynb)
(ox-ipynb-export-org-file-to-ipynb-file "Lecc01.org")
(ox-ipynb-export-org-file-to-ipynb-file "Lecc02.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc03.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc04.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc05.org")
#+END_SRC

#+RESULTS:
: Lecc01.ipynb


# jupyter nbconvert --config mycfg.py
# jupyter nbconvert --config mycfg.py  --to slides --reveal-prefix reveal.js
# jupyter nbconvert --config mycfg.py  --to slides --offline embed --reveal-prefix reveal.js

Â¿furula? NO
#+BEGIN_SRC emacs-lisp
(require 'package)

(add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)

(require 'use-package)
(use-package htmlize)

(require 'ox-publish)
;(use-package htmlize)

;(require 'ox-publish)

(defun my-org-babel-execute-buffer ()
  "Ejecuta todos los bloques de cÃ³digo en el buffer actual."
  (org-babel-execute-buffer))

(defun my-org-html-publish-to-html (plist filename pub-dir)
  "Publica un archivo Org como HTML despuÃ©s de ejecutar los bloques de cÃ³digo."
  (with-current-buffer (find-file-noselect filename)
    (my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-html-publish-to-html plist filename pub-dir)))

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF despuÃ©s de ejecutar los bloques de cÃ³digo."
  (with-current-buffer (find-file-noselect filename)
    (my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,public-directory
                                     :exclude "docs\\|EjerciciosHide\\|SeriesSimuladas4\\|SeriesSimuladas12\\|Calendario\\|notas.*\\|.ipynb_checkpoints\\|00Notas.*\\|org-publisg.*\\|kk.*"
                                     :recursive t
                                     :publishing-function my-org-html-publish-to-html
                                     :auto-preamble t
                                     :auto-sitemap t)
                                    
                                    ("pdf"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,(concat public-directory "pdfs")
                                     :exclude "docs"
                                     :exclude "Calendario"
                                     :exclude ".ipynb_checkpoints"
                                     :exclude "reveal.js.old"
                                     :exclude "notas.*"
                                     :exclude "USB"
                                     :recursive t
                                     :publishing-function my-org-latex-publish-to-pdf
                                     :auto-preamble t
                                     :auto-sitemap nil)
                                    
                                    ("static-html"
                                     :base-directory ,base-directory
                                     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb\\|html"
                                     :publishing-directory ,public-directory
                                     :exclude "docs\\|EjerciciosHide\\|SeriesSimuladas4\\|SeriesSimuladas12\\|notas.*\\|.ipynb_checkpoints\\|org-publisg.*\\|kk.*\\|Lecc*.pdf"
                                     :recursive t
                                     :publishing-function org-publish-attachment)

                                    ("scimax-eln" :components ("html" "static-html" "pdf")))))

  (org-publish "scimax-eln" t))
#+END_SRC

#+RESULTS:



#+BEGIN_SRC emacs-lisp
(require 'package)

(add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)

(require 'use-package)
(use-package htmlize)

(require 'ox-publish)

(defun my-org-babel-execute-buffer ()
  "Ejecuta todos los bloques de cÃ³digo en el buffer actual."
  (org-babel-execute-buffer))

(defun my-org-html-publish-to-html (plist filename pub-dir)
  "Publica un archivo Org como HTML despuÃ©s de ejecutar los bloques de cÃ³digo."
  (with-current-buffer (find-file-noselect filename)
    (my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-html-publish-to-html plist filename pub-dir)))

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF despuÃ©s de ejecutar los bloques de cÃ³digo."
  (with-current-buffer (find-file-noselect filename)
    (my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,public-directory
                                     :exclude "docs\\|EjerciciosHide\\|SeriesSimuladas4\\|SeriesSimuladas12\\|Calendario\\|notas.*\\|.ipynb_checkpoints\\|00Notas.*\\|org-publisg.*\\|kk.*"
                                     :recursive t
                                     :publishing-function my-org-html-publish-to-html
                                     :auto-preamble t
                                     :auto-sitemap t)
                                    
                                    ("pdf"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,(concat public-directory "pdfs")
                                     :exclude "docs"
                                     :exclude "Calendario"
                                     :exclude ".ipynb_checkpoints"
                                     :exclude "reveal.js.old"
                                     :exclude "notas.*"
                                     :exclude "USB"
                                     :recursive t
                                     :publishing-function my-org-latex-publish-to-pdf
                                     :auto-preamble t
                                     :auto-sitemap nil)
                                    
                                    ("static-html"
                                     :base-directory ,base-directory
                                     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb\\|html"
                                     :publishing-directory ,public-directory
                                     :exclude "docs\\|EjerciciosHide\\|SeriesSimuladas4\\|SeriesSimuladas12\\|notas.*\\|.ipynb_checkpoints\\|org-publisg.*\\|kk.*\\|Lecc*.pdf"
                                     :recursive t
                                     :publishing-function org-publish-attachment)

                                    ("scimax-eln" :components ("html" "static-html" "pdf")))))

  (org-publish "scimax-eln" t))
#+END_SRC

clean:
	rm -r -f $(DOCS)
	rm -r -f $(LECCIONES)
	rm -f directorios
	rm -f series_formales


#+BEGIN_SRC bash  :results silent
rm Lecc*.{pdf,slides.html}
#+END_SRC

#+BEGIN_SRC  makefile :noweb no-export :results silent :exports none 
OUT_DIR=./
# Using GNU Make-specific functions here
FILES=$(patsubst Lecc%.org,$(OUT_DIR)/Lecc%.tex,$(wildcard *.org))
PDF-FILES=$(patsubst Lecc%.tex,$(OUT_DIR)/Lecc%.pdf,$(wildcard *.tex))

#.PHONY: all clean install-doc
.PHONY: all install-doc

Lecc01.pdf: %.tex
	latexmk -c $@ 

all: install-doc

#install-doc: $(FILES)  $(PDF-FILES)
install-doc: $(PDF-FILES)

$(OUT_DIR):
	mkdir -v -p $(OUT_DIR)

#%.tex: %.org
#	emacs -q -l ~/Software/scimax/init.el $< --batch -f org-latex-export-to-latex --kill

%.pdf: %.tex
	latexmk -pdf --shell-escape -interaction=batchmode $< 
	latexmk -c

pedeefes: %.pdf

#$(OUT_DIR)/%.tex: %.tex
#	install -v -m 644 -t $(OUT_DIR) $<
#	rm $<
$(OUT_DIR)/%.pdf: %.pdf
	install -v -m 644 -t ./notas $<

#clean:
#	rm *.tex
#+END_SRC


* COMMENT otros 

#+BEGIN_SRC sh :results silent
#pdflatex --shell-escape  -interaction=batchmode Lecc01.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc01.tex
#latexmk -c Lecc01.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc02.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc02.tex
#latexmk -c Lecc02.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc03.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc03.tex
#latexmk -c Lecc03.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc04.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc04.tex
#latexmk -c Lecc04.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc05.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc05.tex
#latexmk -c Lecc05.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc06.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc06.tex
#latexmk -c Lecc06.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc07.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc07.tex
#latexmk -c Lecc07.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc08.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc08.tex
#latexmk -c Lecc08.tex

#+END_SRC


#+BEGIN_SRC sh  :results silent :dir ./Ejercicios

#pdflatex --shell-escape  -interaction=batchmode mortality-marriages.tex
#pdflatex --shell-escape  -interaction=batchmode mortality-marriages.tex
#latexmk -c mortality-marriages.tex

#pdflatex --shell-escape  -interaction=batchmode NombreOscarYConsumoDePetroleo.tex
#pdflatex --shell-escape  -interaction=batchmode NombreOscarYConsumoDePetroleo.tex
#latexmk -c NombreOscarYConsumoDePetroleo.tex

#pdflatex --shell-escape  -interaction=batchmode EjercicioIdentificacionModeloARIMA.tex
#pdflatex --shell-escape  -interaction=batchmode EjercicioIdentificacionModeloARIMA.tex
#latexmk -c EjercicioIdentificacionModeloARIMA.tex

#pdflatex --shell-escape  -interaction=batchmode SegundoEjercicioIdentificacionARIMA.tex
#pdflatex --shell-escape  -interaction=batchmode SegundoEjercicioIdentificacionARIMA.tex
#latexmk -c SegundoEjercicioIdentificacionARIMA.tex

#pdflatex --shell-escape  -interaction=batchmode IndicePreciosViviendasNuevasYdeSegundaMano.tex
#pdflatex --shell-escape  -interaction=batchmode IndicePreciosViviendasNuevasYdeSegundaMano.tex
#latexmk -c IndicePreciosViviendasNuevasYdeSegundaMano.tex

#pdflatex --shell-escape  -interaction=batchmode LetrasTesoroAmericano3y6meses.tex
#pdflatex --shell-escape  -interaction=batchmode LetrasTesoroAmericano3y6meses.tex
#latexmk -c LetrasTesoroAmericano3y6meses.tex

#pdflatex --shell-escape  -interaction=batchmode SerieCuentasFinancierasBE.tex
#pdflatex --shell-escape  -interaction=batchmode SerieCuentasFinancierasBE.tex
#latexmk -c SerieCuentasFinancierasBE.tex

#pdflatex --shell-escape  -interaction=batchmode FumadoresVsIncendios.tex
#pdflatex --shell-escape  -interaction=batchmode FumadoresVsIncendios.tex
#latexmk -c SerieCuentasFinancierasBE.tex

#+END_SRC


#+BEGIN_SRC emacs-lisp :results silent
(require 'ox-ipynb)
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc01.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc02.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc03.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc04.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc05.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc06.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc07.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc08.org")
#+END_SRC

# :tangle publish_notebooks.el 
#+BEGIN_SRC emacs-lisp :results silent
(require 'ox-ipynb)
(ox-ipynb-export-org-file-to-ipynb-file "lecciones/Lecc01.org")
(ox-ipynb-export-org-file-to-ipynb-file "lecciones/Lecc02.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc02.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc03.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc04.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc05.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc06.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc07.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc08.org")
#+END_SRC


#+BEGIN_SRC sh :results silent
emacs -q -l ~/Software/scimax/init.el -batch -nw -l publish.el
emacs -q -l ~/Software/scimax/init.el -batch -nw -l publish_notebooks.el
cd lecciones
jupyter nbconvert --config ../mycfg-GitHubPages.py --to slides --reveal-prefix reveal.js
mkdir CuadernosElectronicos
mkdir Transparencias
mv Lecc*.slides.html  Transparencias
mv Lecc*.ipynb CuadernosElectronicos
ln -s -r ./img/ ./Transparencias/
ln -s -r ./img/ ./CuadernosElectronicos/
rm -f Transparencias/reveal.js
ln -s -r ../reveal.js Transparencias/reveal.js
cd ..
rm -f ./docs/datos
ln -s -r ./datos/ ./docs/
emacs -q -l ~/Software/scimax/init.el -batch -nw -l static_publish.el
rm -f docs/Transparencias/reveal.js
ln -s -r ./reveal.js docs/Transparencias/reveal.js
#+END_SRC


** Org-publish                                                     :noexport:

#+BEGIN_SRC sh :results silent 
#emacs -q -l ~/Software/scimax/init.el lecciones/Lecc01.org --batch -f org-babel-execute-buffer --kill
#+END_SRC


Necesitamos un pequeÃ±o guiÃ³n en =elisp= para ajustar la publicaciÃ³n.
# :tangle publish.el
#+BEGIN_SRC emacs-lisp 
(require 'package)

(add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)

(require 'use-package)
(use-package htmlize)

(require 'ox-publish)

(defun my-org-babel-execute-buffer ()
  "Ejecuta todos los bloques de cÃ³digo en el buffer actual."
  (org-babel-execute-buffer))

(defun my-org-html-publish-to-html (plist filename pub-dir)
  "Publica un archivo Org como HTML despuÃ©s de ejecutar los bloques de cÃ³digo."
  (with-current-buffer (find-file-noselect filename)
    ;(my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-html-publish-to-html plist filename pub-dir)))

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF despuÃ©s de ejecutar los bloques de cÃ³digo."
  (with-current-buffer (find-file-noselect filename)
    ;(my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,public-directory
                                     :exclude ".ipynb_checkpoints\\|00Notas.*\\|org-publisg.*\\|kk.*"
                                     :recursive t
                                     :publishing-function my-org-html-publish-to-html
                                     :auto-preamble t
                                     :auto-sitemap nil)
                                    
                                    ("pdf"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,(concat public-directory "pdfs")
                                     :exclude ".ipynb_checkpoints"
                                     :recursive t
                                     :publishing-function my-org-latex-publish-to-pdf
                                     :auto-preamble t
                                     :auto-sitemap nil)
                                    
                                    ("scimax-eln" :components ("html" "pdf")))))

  (org-publish "scimax-eln" t))
#+END_SRC

#+RESULTS:

# :tangle static_publish.el
#+BEGIN_SRC emacs-lisp :results silent
(require 'package)

(add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)

(require 'use-package)
(use-package htmlize)

(require 'ox-publish)

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("static-html"
                                     :base-directory ,base-directory
                                     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb\\|html"
                                     :publishing-directory ,public-directory
                                     :exclude "readtheorg_inline.theme\\|mycfg-GitHubPages.py\\|Lecc*.pdf"
                                     :recursive t
                                     :publishing-function org-publish-attachment)

                                    ("scimax-eln" :components ("static-html")))))

  (org-publish "scimax-eln" t))
#+END_SRC


#+BEGIN_SRC emacs-lisp :results silent
(require 'ox-publish)

(defun my-org-babel-execute-buffer ()
  "Ejecuta todos los bloques de cÃ³digo en el buffer actual."
  (org-babel-execute-buffer))

(defun my-org-html-publish-to-html (plist filename pub-dir)
  "Publica un archivo Org como HTML despuÃ©s de ejecutar los bloques de cÃ³digo."
  (with-current-buffer (find-file-noselect filename)
    ;(my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-html-publish-to-html plist filename pub-dir)))

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF despuÃ©s de ejecutar los bloques de cÃ³digo."
  (with-current-buffer (find-file-noselect filename)
    ;(my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,public-directory
                                     :exclude ".ipynb_checkpoints\\|00Notas.*\\|org-publisg.*\\|kk.*"
                                     :recursive t
                                     :publishing-function my-org-html-publish-to-html
                                     :auto-preamble t
                                     :auto-sitemap t)
                                    
                                    ("pdf"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,(concat public-directory "pdfs")
                                     :exclude ".ipynb_checkpoints"
                                     :recursive t
                                     :publishing-function my-org-latex-publish-to-pdf
                                     :auto-preamble t
                                     :auto-sitemap nil)
                                    
                                    ("static-html"
                                     :base-directory ,base-directory
                                     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb\\|html"
                                     :publishing-directory ,public-directory
                                     :exclude "docs\\|EjerciciosHide\\|.ipynb_checkpoints\\|org-publisg.*\\|kk.*\\|Lecc*.pdf"
                                     :recursive t
                                     :publishing-function org-publish-attachment)

                                    ("scimax-eln" :components ("html" "static-html" "pdf")))))

  (org-publish "scimax-eln" t))
#+END_SRC



Podemos chequear la versiÃ³n local ejecutando el siguiente bloque

#+BEGIN_SRC emacs-lisp :results silent
(browse-url "docs/index.html")
#+END_SRC


#+BEGIN_SRC bash  :results silent
rm Lecc*.{pdf,slides.html}
#+END_SRC


*** Commit and publish the html pages                              :noexport:

To publish these we go into the html directory, commit all the files and push them to GitHUB.


#+BEGIN_SRC sh 
#git add docs
git commit -m "update"
git push
#+END_SRC



*** con pdfs

#+BEGIN_SRC emacs-lisp
(require 'ox-publish)

(let* ((base-directory "./")
       (public-directory "~/repos/Ectrkk/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
				     :base-directory ,base-directory
				     :base-extension "org"
				     :publishing-directory ,(concat public-directory "docs")
				     :exclude "docs"
				     :exclude "Calendario"
				     :exclude ".ipynb_checkpoints"
				     :exclude "reveal.js.old"
				     :exclude "USB"
				     :recursive t
				     :publishing-function org-html-publish-to-html
				     :auto-preamble t
				     :auto-sitemap t)
				    ("pdf"
				     :base-directory ,base-directory
				     :base-extension "org"
				     :publishing-directory ,(concat public-directory "docs/pdfs")
				     :exclude "docs"
				     :exclude "Calendario"
				     :exclude ".ipynb_checkpoints"
				     :exclude "reveal.js.old"
				     :exclude "USB"
				     :recursive t
				     :publishing-function org-latex-publish-to-pdf
				     :auto-preamble t
				     :auto-sitemap nil)
				    
				    ("static-html"
				     :base-directory ,base-directory
				     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|txt\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb"
				     :publishing-directory ,(concat public-directory "docs")
				     :exclude "docs"
				     :exclude "Calendario"
				     :exclude ".ipynb_checkpoints"
				     :exclude "reveal.js.old"
				     :exclude "USB"
				     :recursive t
				     :publishing-function org-publish-attachment)

				    ;; ... all the components ...
				    ("scimax-eln" :components ("html" "static-html" "pdf")))))

  (org-publish "scimax-eln" t))
#+END_SRC

#+RESULTS:

* COMMENT slides

[[https://nbconvert.readthedocs.io/en/latest/config_options.html][ConfiguraciÃ³n para nbconvert]] (las slides usan ficheros locales)

# :tangle mycfg.py
#+BEGIN_SRC python 
c = get_config()
c.NbConvertApp.notebooks = ["Lecc01.ipynb",
                            "Lecc02.ipynb",
                            "Lecc03.ipynb",
                            "Lecc04.ipynb",
                            "Lecc05.ipynb",
                            "Lecc06.ipynb"]
c.SlidesExporter.reveal_theme = 'solarized'
c.SlidesExporter.reveal_scroll = True
#+END_SRC

# :tangle custom.css
#+BEGIN_SRC css 
.slides {
  width: 90% !important;
}
#+END_SRC


#+BEGIN_SRC sh :results none
#jupyter nbconvert --config mycfg.py --to notebook
jupyter nbconvert --config mycfg.py --to slides 
#+END_SRC

# omite las celdas de cÃ³digo
#+BEGIN_SRC sh :results silent
#jupyter nbconvert --config mycfg.py --to notebook
jupyter nbconvert --config mycfg.py --to slides --no-input
#+END_SRC


# emacs --batch  --eval "(require 'org)(use-package ox-ipynb)" Lecc02.org --funcall ox-ipynb-export-org-file-to-ipynb-file

# emacsclient -e '(progn (switch-to-buffer "my-presentation.org") (org-beamer-export-to-pdf))'

# emacs --batch --load=plugin.el --load=my-funcs.el --eval=my-func file.v

# c.SlidesExporter.reveal_theme = 'beige'
# c.SlidesExporter.SlidesExporter.reveal_number = 'c/t'
# c.SlidesExporter.slideNumber = True
# c.SlidesExporter.reveal_width = 5500
# c.SlidesExporter.reveal_height = 800

#+BEGIN_SRC makefile :noweb no-export :results silent :exports none :tangle OLDmakefile.old
# Directorios
LECCIONES_SRC = ./org-lessons
LECCIONES = ./lecciones
DOCS = ./docs
CUADERNOS = $(DOCS)/CuadernosElectronicos
TRANSPARENCIAS = $(DOCS)/Transparencias

# PatrÃ³n para los archivos fuente
SRC_FILES = $(LECCIONES_SRC)/Lecc*.org

# Regla principal
all: notebooksYslides calendario
	emacs -q -l ~/Software/scimax/init.el -batch -nw -l publica.el

calendario: $(DOCS)/Calendario-Econometria-Aplicada.pdf

$(DOCS)/Calendario-Econometria-Aplicada.pdf:
	emacs --batch Calendario/README.org -l org -f org-babel-tangle
	cd Calendario && make Calendario-Econometria-Aplicada.pdf

notebooksYslides: $(patsubst $(LECCIONES_SRC)/%.org,$(CUADERNOS)/%.ipynb,$(wildcard $(SRC_FILES)))

# Regla para generar notebooks y slides
$(CUADERNOS)/%.ipynb $(TRANSPARENCIAS)/%.slides.html: $(LECCIONES_SRC)/%.org
	make directorios 
	make series_formales
	cp -a $(LECCIONES_SRC)/*.bib $(LECCIONES)
	cp -a $< $(LECCIONES)
	emacs -q -l ~/Software/scimax/init.el $(LECCIONES)/$(@F:.ipynb=.org) --batch -f org-babel-execute-buffer --kill
	mv $(LECCIONES)/$(@F:.ipynb=.ipynb) $(CUADERNOS)
	mv $(LECCIONES)/$(@F:.ipynb=.slides.html) $(TRANSPARENCIAS)

series_formales: $(LECCIONES_SRC)/src/implementacion_series_formales.org
	make directorios 
	cp $< $(LECCIONES)/src/
	emacs --batch $(LECCIONES)/src/implementacion_series_formales.org -l org -f org-babel-tangle
	ln -s -r $(LECCIONES)/src/implementacion_series_formales.py $(LECCIONES)/
	cp -a $(LECCIONES)/src/implementacion_series_formales.py $(CUADERNOS)/src/
	ln -s -r $(CUADERNOS)/src/implementacion_series_formales.py $(CUADERNOS)/
	emacs -q -l ~/Software/scimax/init.el -batch -nw --eval "(require 'ox-ipynb)" --eval "(ox-ipynb-export-org-file-to-ipynb-file \"lecciones/src/implementacion_series_formales.org\")"
	jupyter nbconvert --execute --inplace $(LECCIONES)/src/implementacion_series_formales.ipynb
	jupyter nbconvert --config mycfg-GitHubPages.py --to slides --reveal-prefix "https://unpkg.com/reveal.js@5.2.1" --execute $(LECCIONES)/src/implementacion_series_formales.ipynb
	jupyter nbconvert --execute --to html $(LECCIONES)/src/implementacion_series_formales.ipynb
	mv $(LECCIONES)/src/implementacion_series_formales.ipynb $(CUADERNOS)
	mv $(LECCIONES)/src/implementacion_series_formales.slides.html $(TRANSPARENCIAS)
	mv $(LECCIONES)/src/implementacion_series_formales.html $(DOCS)
	touch $@

directorios: 
	mkdir -v -p $(LECCIONES)/src
	mkdir -v -p $(LECCIONES)/img
	mkdir -v -p $(DOCS)/img
	mkdir -v -p $(DOCS)/pdfs
	mkdir -v -p $(TRANSPARENCIAS)
	mkdir -v -p $(CUADERNOS)/src
	ln -s -r $(DOCS)/img/ $(TRANSPARENCIAS)/
	ln -s -r $(DOCS)/img/ $(CUADERNOS)/
	touch directorios

clean:
	rm -r -f $(LECCIONES)

cleanAll: clean
	find $(DOCS)/ -mindepth 1 ! -name 'README.org' -exec rm -rf {} +
	rm -f directorios
	rm -f series_formales

#+END_SRC

* Consulta a Copilot sobre la generaciÃ³n de figuras

#+BEGIN_QUOTE
Anteriormente faltaba por instalar el paquete dvipng. Una vez instalado dvipng, el bloque de cÃ³digo:

#+BEGIN_SRC jupyter-python :results file :exports results
plt.plot([1,2,3],[4,5,6])
plt.savefig("img/prueba_action.png")
"img/prueba_action.png"
#+END_SRC

ha creado correctamente el fichero "img/prueba_action.png" con la figura. Sin embargo, el bloque

#+BEGIN_SRC jupyter-python :results file :file ./img/lecc01/PIB_UEM.png
df1.plot(x='obs',xlabel='',figsize=(15,4)).set_title('PIB zona euro',fontsize=18)
#+END_SRC

no ha creado el fichero ./img/lecc01/PIB_UEM.png con su correspondiente figura.
#+END_QUOTE

Â¡Excelente que la instalaciÃ³n de dvipng haya solucionado la generaciÃ³n de imÃ¡genes para el primer bloque!  
Ahora, pasemos a analizar por quÃ© el segundo bloque **no genera** el archivo `./img/lecc01/PIB_UEM.png`.

---

## DiagnÃ³stico y causas probables

### 1. Diferencia clave entre ambos bloques

- **Bloque que funciona:**
  ```org
  #+BEGIN_SRC jupyter-python :results file :exports results
  plt.plot([1,2,3],[4,5,6])
  plt.savefig("img/prueba_action.png")
  "img/prueba_action.png"
  #+END_SRC
  ```
  - AquÃ­, tÃº generas la figura y la guardas explÃ­citamente con `plt.savefig()`, y luego devuelves el nombre del archivo en la Ãºltima lÃ­nea.

- **Bloque que falla:**
  ```org
  #+BEGIN_SRC jupyter-python :results file :file ./img/lecc01/PIB_UEM.png
  df1.plot(x='obs',xlabel='',figsize=(15,4)).set_title('PIB zona euro',fontsize=18)
  #+END_SRC
  ```
  - AquÃ­ confÃ­as en que org-babel/jupyter-python guardarÃ¡ automÃ¡ticamente la figura en `:file`, pero el mÃ©todo pandas `df.plot()` **no guarda ni devuelve** el archivo.

### 2. Â¿Por quÃ© falla el segundo bloque?

- El argumento `:file ./img/lecc01/PIB_UEM.png` espera que el Ãºltimo comando del bloque **guarde la imagen en ese path** (o devuelva una figura que org/jupyter pueda guardar ahÃ­).
- El mÃ©todo `df1.plot(...).set_title(...)` crea y modifica una figura activa, pero **no la guarda**.
- Si usas solo `set_title()`, no hay ninguna instrucciÃ³n para guardar el grÃ¡fico.
- Por defecto, ni org-babel ni jupyter-python pueden adivinar que la figura debe ser guardada en ese path si no se lo indicas de forma explÃ­cita.

---

## SoluciÃ³n recomendada

**Debes guardar la figura manualmente al path especificado**, y devolver ese path como resultado del bloque.

### Forma correcta:

```org
#+BEGIN_SRC jupyter-python :results file :file ./img/lecc01/PIB_UEM.png
ax = df1.plot(x='obs', xlabel='', figsize=(15,4))
ax.set_title('PIB zona euro', fontsize=18)
import matplotlib.pyplot as plt
plt.savefig("./img/lecc01/PIB_UEM.png")
"./img/lecc01/PIB_UEM.png"
#+END_SRC
```

- Esto asegura que la imagen se guarda donde deseas y que el bloque devuelve el path correcto para que org-babel inserte la imagen en el documento.

### Alternativas

- Si usas solo `:results file` sin `:file`, puedes devolver el nombre del archivo en la Ãºltima lÃ­nea.
- Siempre asegÃºrate de llamar a `plt.savefig()` **despuÃ©s** de crear el grÃ¡fico.

---

## Resumen

- El bloque con `plt.savefig(...)` funciona porque guarda explÃ­citamente la imagen.
- El bloque con pandas `plot` y solo `set_title()` **NO guarda la imagen**; debes aÃ±adir `plt.savefig()` y devolver el path.
- AsÃ­, org-babel/jupyter-python incrustarÃ¡ correctamente la imagen en el documento exportado.

---

Â¿Te gustarÃ­a que te ayude a actualizar todos los bloques de tu .org para que usen esta tÃ©cnica, o necesitas una guÃ­a para automatizar este patrÃ³n?

#+BEGIN_QUOTE
Sin embargo. Cuando ejecuto localmente el fichero org sÃ­ se crean las figuras en mi disco. Â¿Hay algÃºn modo de que tambiÃ©n se creen con Actions sin modificar los bloques? Es decir, Â¿hay algÃºn modeo de que funcionen tal y como estÃ¡n ahora mismo?
#+END_QUOTE

Â¡Esta es una pregunta muy frecuente al usar org-babel/jupyter en entornos CI/CD!  
La diferencia entre tu entorno local y GitHub Actions suele deberse a **la configuraciÃ³n del entorno grÃ¡fico** y de **matplotlib**.

---

## Â¿Por quÃ© funciona localmente pero no en Actions?

- **Localmente**, matplotlib tiene acceso a un entorno grÃ¡fico (X11, Wayland, etc.) y suele usar un backend como `TkAgg`, `Qt5Agg`,â€¦
- **En GitHub Actions** (o cualquier entorno headless), **matplotlib no tiene acceso a un display** y por defecto puede intentar usar un backend que requiere uno, lo que impide guardar imÃ¡genes.

### Backend headless necesario

Para guardar imÃ¡genes sin display, **matplotlib debe usar un backend como `"Agg"`**.

---

## SoluciÃ³n: Forzar el backend "Agg" para matplotlib

Esto se puede hacer **sin modificar los bloques** aÃ±adiendo una configuraciÃ³n previa en tu flujo de trabajo o al comienzo de la ejecuciÃ³n.

### OpciÃ³n 1: Variable de entorno en el workflow

AÃ±ade esto antes de ejecutar Emacs en tu `build.yml`:
```yaml
- name: Set MPLBACKEND (matplotlib)
  run: echo "MPLBACKEND=Agg" >> $GITHUB_ENV
```
Matplotlib detectarÃ¡ esto y usarÃ¡ el backend adecuado.

### OpciÃ³n 2: Variable de entorno en shell

O directamente en el comando de ejecuciÃ³n:
```bash
MPLBACKEND=Agg emacs -Q -l ~/Software/scimax/init.el ./lecciones/Lecc01.org --batch ...
```

### OpciÃ³n 3: ConfiguraciÃ³n en Emacs/jupyter-python

Si puedes modificar la configuraciÃ³n de Emacs que se carga, aÃ±ade a tu init.el o a la cabecera de los bloques:
```python
import matplotlib
matplotlib.use("Agg")
```
Pero esto requerirÃ­a modificar los bloques, que quieres evitar.

---

## Resumen

- **El problema**: matplotlib necesita el backend "Agg" para funcionar headless.
- **La soluciÃ³n sin modificar los bloques**: establece la variable de entorno `MPLBACKEND=Agg` en el workflow antes de ejecutar Emacs.
- **AsÃ­**, los bloques que generan imÃ¡genes funcionarÃ¡n igual en Actions que localmente, **sin necesidad de cambiar el cÃ³digo de los bloques**.

---

Â¿Quieres que te proponga el fragmento exacto para tu `build.yml`?
