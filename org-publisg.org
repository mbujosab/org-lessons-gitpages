
Fichero =makefile= que genera el directorio público =docs= con los ficheros para GitPages con subdirectorios para los =CuadernosElectronicos=, =pdfs=, =Transparencias= y los ficheros con las lecciones en ~html~:

#+BEGIN_SRC makefile :noweb no-export :results silent :exports none :tangle makefile
# Directorios
LECCIONES_SRC = ./org-lessons
LECCIONES = ./lecciones
DOCS = ./docs
CUADERNOS = $(DOCS)/CuadernosElectronicos
TRANSPARENCIAS = $(DOCS)/Transparencias

# Patrón para los archivos fuente
SRC_FILES = $(LECCIONES_SRC)/Lecc*.org

# Regla principal
all: notebooksYslides calendario
	emacs -q -l ~/Software/scimax/init.el -batch -nw -l publica.el
	cp -a Calendario-Econometria-Aplicada.pdf $(DOCS)

calendario: $(DOCS)/Calendario-Econometria-Aplicada.pdf

$(DOCS)/Calendario-Econometria-Aplicada.pdf:
	emacs --batch Calendario/README.org -l org -f org-babel-tangle
	cd Calendario && make Calendario-Econometria-Aplicada.pdf

notebooksYslides: $(patsubst $(LECCIONES_SRC)/%.org,$(CUADERNOS)/%.ipynb,$(wildcard $(SRC_FILES)))

# Regla para generar notebooks y slides
$(CUADERNOS)/%.ipynb $(TRANSPARENCIAS)/%.slides.html: $(LECCIONES_SRC)/%.org
	make directorios 
	make series_formales
	cp -a $(LECCIONES_SRC)/*.bib $(LECCIONES)
	cp -a $< $(LECCIONES)
	emacs -q -l ~/Software/scimax/init.el $(LECCIONES)/$(@F:.ipynb=.org) --batch -f org-babel-execute-buffer --kill
	mv $(LECCIONES)/$(@F:.ipynb=.ipynb) $(CUADERNOS)
	mv $(LECCIONES)/$(@F:.ipynb=.slides.html) $(TRANSPARENCIAS)

series_formales: $(LECCIONES_SRC)/src/implementacion_series_formales.org
	make directorios 
	cp $< $(LECCIONES)/src/
	emacs --batch $(LECCIONES)/src/implementacion_series_formales.org -l org -f org-babel-tangle
	ln -s -r $(LECCIONES)/src/implementacion_series_formales.py $(LECCIONES)/
	cp -a $(LECCIONES)/src/implementacion_series_formales.py $(CUADERNOS)/src/
	ln -s -r $(CUADERNOS)/src/implementacion_series_formales.py $(CUADERNOS)/
	emacs -q -l ~/Software/scimax/init.el -batch -nw --eval "(require 'ox-ipynb)" --eval "(ox-ipynb-export-org-file-to-ipynb-file \"lecciones/src/implementacion_series_formales.org\")"
	jupyter nbconvert --execute --inplace $(LECCIONES)/src/implementacion_series_formales.ipynb
	jupyter nbconvert --config mycfg-GitHubPages.py --to slides --reveal-prefix "https://unpkg.com/reveal.js@5.2.1" --execute $(LECCIONES)/src/implementacion_series_formales.ipynb
	jupyter nbconvert --execute --to html $(LECCIONES)/src/implementacion_series_formales.ipynb
	mv $(LECCIONES)/src/implementacion_series_formales.ipynb $(CUADERNOS)
	mv $(LECCIONES)/src/implementacion_series_formales.slides.html $(TRANSPARENCIAS)
	mv $(LECCIONES)/src/implementacion_series_formales.html $(DOCS)
	touch $@

directorios: 
	mkdir -v -p $(LECCIONES)/src
	mkdir -v -p $(LECCIONES)/img
	mkdir -v -p $(DOCS)/img
	mkdir -v -p $(DOCS)/pdfs
	mkdir -v -p $(TRANSPARENCIAS)
	mkdir -v -p $(CUADERNOS)/src
	ln -s -r $(DOCS)/img/ $(TRANSPARENCIAS)/
	ln -s -r $(DOCS)/img/ $(CUADERNOS)/
	touch directorios

clean:
	rm -r -f $(LECCIONES)

cleanAll: clean
	rm -r -f $(DOCS)
	rm -f directorios
	rm -f series_formales

#+END_SRC

Este script transforma los ficheros org de las lecciones en pdfs y htmls. 

#+BEGIN_SRC emacs-lisp :tangle publica.el :results silent
(require 'ox-publish)

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF después de ejecutar los bloques de código."
  (with-current-buffer (find-file-noselect filename)
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
				     :base-directory ,base-directory
				     :base-extension "org"
                                     :publishing-directory ,public-directory
				     :exclude "src\\|docs\\|Calendario"
				     :recursive t
				     :publishing-function org-html-publish-to-html
				     :auto-preamble t
				     :auto-sitemap nil)
				    
				    ("pdf"
				     :base-directory ,base-directory
				     :base-extension "org"
				     :publishing-directory ,(concat public-directory "pdfs")
 				     :exclude "src\\|docs\\|Calendario"
				     :recursive t
				     :publishing-function my-org-latex-publish-to-pdf
				     :auto-preamble t
				     :auto-sitemap nil)
				    
				    ("static-html"
				     :base-directory ,base-directory
				     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|txt\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb"
				     :publishing-directory ,public-directory
				     :exclude "src\\|docs\\|Calendario"
				     :recursive t
				     :publishing-function org-publish-attachment)

				    ;; ... all the components ...
				    ("scimax-eln" :components ("html" "static-html" "pdf")))))

  (org-publish "scimax-eln" t))
#+END_SRC


#+BEGIN_SRC emacs-lisp
(require 'ox-publish)

(defun my-org-babel-execute-buffer ()
  "Ejecuta todos los bloques de código en el buffer actual."
  (org-babel-execute-buffer))

(defun my-org-html-publish-to-html (plist filename pub-dir)
  "Publica un archivo Org como HTML después de ejecutar los bloques de código."
  (with-current-buffer (find-file-noselect filename)
    ;(my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-html-publish-to-html plist filename pub-dir)))

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF después de ejecutar los bloques de código."
  (with-current-buffer (find-file-noselect filename)
    ;(my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,public-directory
                                     :exclude ".ipynb_checkpoints\\|00Notas.*\\|org-publisg.*\\|kk.*\\|src"
                                     :recursive t
                                     :auto-preamble t
                                     :auto-sitemap t
				     :sitemap-title "Lecciones"
                                     :publishing-function my-org-html-publish-to-html
    				     :exclude-tags ("pdf"))
                                   
                                    ("pdf"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,(concat public-directory "pdfs")
                                     :exclude ".ipynb_checkpoints\\|src\\|sitemap.pdf"
                                     :recursive t
                                     :auto-preamble t
                                     :auto-sitemap nil
                                     :publishing-function my-org-latex-publish-to-pdf)
                                    
                                    ("static-html"
                                     :base-directory ,base-directory
                                     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb\\|html"
                                     :publishing-directory ,public-directory
                                     :exclude "docs\\|src\\|EjerciciosHide\\|.ipynb_checkpoints\\|org-publisg.*\\|kk.*\\|Lecc*.pdf\\|sitemap.pdf"
                                     :recursive t
                                     :publishing-function org-publish-attachment)

                                    ("scimax-eln" :components ("html" "static-html" "pdf")))))

  (org-publish "scimax-eln" t))
#+END_SRC


Podemos chequear la versión local ejecutando el siguiente bloque

#+BEGIN_SRC emacs-lisp :results silent
(browse-url "docs/index.html")
#+END_SRC



* slides para GitHubpages


[[https://nbconvert.readthedocs.io/en/latest/config_options.html][Configuración para nbconvert]] (las slides usan ficheros de la web para poder funcionar en GitHubPages)

[[https://dbafromthecold.com/2021/02/21/creating-presentations-with-reveal-and-github-pages/][creating-presentations-with-reveal-and-github-pages]]

https://github.com/RichardAfolabi/Presentation_js

https://emasuriano.com/til/2024-07-01-create-presentations-from-notebook/

https://github.com/yjwen/org-reveal
https://github.com/hexmode/ox-reveal

#+BEGIN_SRC python :tangle mycfg-GitHubPages.py
c = get_config()

c.SlidesExporter.reveal_theme = 'solarized'
c.SlidesExporter.reveal_scroll = True
c.SlidesExporter.language_code = 'es'

c.SlidesExporter.mathjax_url = "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"

c.SlidesExporter.jquery_url = "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"

c.SlidesExporter.require_js_url = "https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js"
#+END_SRC


* COMMENT Ñordas

#+BEGIN_SRC sh :results silent
jupyter nbconvert --config mycfg-GitHubPages.py --to slides --reveal-prefix reveal.js --no-input
#+END_SRC


#+BEGIN_SRC emacs-lisp
(require 'ox-ipynb)
(ox-ipynb-export-org-file-to-ipynb-file "Lecc01.org")
(ox-ipynb-export-org-file-to-ipynb-file "Lecc02.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc03.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc04.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc05.org")
#+END_SRC

#+RESULTS:
: Lecc01.ipynb


# jupyter nbconvert --config mycfg.py
# jupyter nbconvert --config mycfg.py  --to slides --reveal-prefix reveal.js
# jupyter nbconvert --config mycfg.py  --to slides --offline embed --reveal-prefix reveal.js

¿furula? NO
#+BEGIN_SRC emacs-lisp
(require 'package)

(add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)

(require 'use-package)
(use-package htmlize)

(require 'ox-publish)
;(use-package htmlize)

;(require 'ox-publish)

(defun my-org-babel-execute-buffer ()
  "Ejecuta todos los bloques de código en el buffer actual."
  (org-babel-execute-buffer))

(defun my-org-html-publish-to-html (plist filename pub-dir)
  "Publica un archivo Org como HTML después de ejecutar los bloques de código."
  (with-current-buffer (find-file-noselect filename)
    (my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-html-publish-to-html plist filename pub-dir)))

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF después de ejecutar los bloques de código."
  (with-current-buffer (find-file-noselect filename)
    (my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,public-directory
                                     :exclude "docs\\|EjerciciosHide\\|SeriesSimuladas4\\|SeriesSimuladas12\\|Calendario\\|notas.*\\|.ipynb_checkpoints\\|00Notas.*\\|org-publisg.*\\|kk.*"
                                     :recursive t
                                     :publishing-function my-org-html-publish-to-html
                                     :auto-preamble t
                                     :auto-sitemap t)
                                    
                                    ("pdf"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,(concat public-directory "pdfs")
                                     :exclude "docs"
                                     :exclude "Calendario"
                                     :exclude ".ipynb_checkpoints"
                                     :exclude "reveal.js.old"
                                     :exclude "notas.*"
                                     :exclude "USB"
                                     :recursive t
                                     :publishing-function my-org-latex-publish-to-pdf
                                     :auto-preamble t
                                     :auto-sitemap nil)
                                    
                                    ("static-html"
                                     :base-directory ,base-directory
                                     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb\\|html"
                                     :publishing-directory ,public-directory
                                     :exclude "docs\\|EjerciciosHide\\|SeriesSimuladas4\\|SeriesSimuladas12\\|notas.*\\|.ipynb_checkpoints\\|org-publisg.*\\|kk.*\\|Lecc*.pdf"
                                     :recursive t
                                     :publishing-function org-publish-attachment)

                                    ("scimax-eln" :components ("html" "static-html" "pdf")))))

  (org-publish "scimax-eln" t))
#+END_SRC

#+RESULTS:



#+BEGIN_SRC emacs-lisp
(require 'package)

(add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)

(require 'use-package)
(use-package htmlize)

(require 'ox-publish)

(defun my-org-babel-execute-buffer ()
  "Ejecuta todos los bloques de código en el buffer actual."
  (org-babel-execute-buffer))

(defun my-org-html-publish-to-html (plist filename pub-dir)
  "Publica un archivo Org como HTML después de ejecutar los bloques de código."
  (with-current-buffer (find-file-noselect filename)
    (my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-html-publish-to-html plist filename pub-dir)))

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF después de ejecutar los bloques de código."
  (with-current-buffer (find-file-noselect filename)
    (my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,public-directory
                                     :exclude "docs\\|EjerciciosHide\\|SeriesSimuladas4\\|SeriesSimuladas12\\|Calendario\\|notas.*\\|.ipynb_checkpoints\\|00Notas.*\\|org-publisg.*\\|kk.*"
                                     :recursive t
                                     :publishing-function my-org-html-publish-to-html
                                     :auto-preamble t
                                     :auto-sitemap t)
                                    
                                    ("pdf"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,(concat public-directory "pdfs")
                                     :exclude "docs"
                                     :exclude "Calendario"
                                     :exclude ".ipynb_checkpoints"
                                     :exclude "reveal.js.old"
                                     :exclude "notas.*"
                                     :exclude "USB"
                                     :recursive t
                                     :publishing-function my-org-latex-publish-to-pdf
                                     :auto-preamble t
                                     :auto-sitemap nil)
                                    
                                    ("static-html"
                                     :base-directory ,base-directory
                                     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb\\|html"
                                     :publishing-directory ,public-directory
                                     :exclude "docs\\|EjerciciosHide\\|SeriesSimuladas4\\|SeriesSimuladas12\\|notas.*\\|.ipynb_checkpoints\\|org-publisg.*\\|kk.*\\|Lecc*.pdf"
                                     :recursive t
                                     :publishing-function org-publish-attachment)

                                    ("scimax-eln" :components ("html" "static-html" "pdf")))))

  (org-publish "scimax-eln" t))
#+END_SRC

clean:
	rm -r -f $(DOCS)
	rm -r -f $(LECCIONES)
	rm -f directorios
	rm -f series_formales


#+BEGIN_SRC bash  :results silent
rm Lecc*.{pdf,slides.html}
#+END_SRC

#+BEGIN_SRC  makefile :noweb no-export :results silent :exports none 
OUT_DIR=./
# Using GNU Make-specific functions here
FILES=$(patsubst Lecc%.org,$(OUT_DIR)/Lecc%.tex,$(wildcard *.org))
PDF-FILES=$(patsubst Lecc%.tex,$(OUT_DIR)/Lecc%.pdf,$(wildcard *.tex))

#.PHONY: all clean install-doc
.PHONY: all install-doc

Lecc01.pdf: %.tex
	latexmk -c $@ 

all: install-doc

#install-doc: $(FILES)  $(PDF-FILES)
install-doc: $(PDF-FILES)

$(OUT_DIR):
	mkdir -v -p $(OUT_DIR)

#%.tex: %.org
#	emacs -q -l ~/Software/scimax/init.el $< --batch -f org-latex-export-to-latex --kill

%.pdf: %.tex
	latexmk -pdf --shell-escape -interaction=batchmode $< 
	latexmk -c

pedeefes: %.pdf

#$(OUT_DIR)/%.tex: %.tex
#	install -v -m 644 -t $(OUT_DIR) $<
#	rm $<
$(OUT_DIR)/%.pdf: %.pdf
	install -v -m 644 -t ./notas $<

#clean:
#	rm *.tex
#+END_SRC


* COMMENT otros 

#+BEGIN_SRC sh :results silent
#pdflatex --shell-escape  -interaction=batchmode Lecc01.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc01.tex
#latexmk -c Lecc01.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc02.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc02.tex
#latexmk -c Lecc02.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc03.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc03.tex
#latexmk -c Lecc03.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc04.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc04.tex
#latexmk -c Lecc04.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc05.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc05.tex
#latexmk -c Lecc05.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc06.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc06.tex
#latexmk -c Lecc06.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc07.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc07.tex
#latexmk -c Lecc07.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc08.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc08.tex
#latexmk -c Lecc08.tex

#+END_SRC


#+BEGIN_SRC sh  :results silent :dir ./Ejercicios

#pdflatex --shell-escape  -interaction=batchmode mortality-marriages.tex
#pdflatex --shell-escape  -interaction=batchmode mortality-marriages.tex
#latexmk -c mortality-marriages.tex

#pdflatex --shell-escape  -interaction=batchmode NombreOscarYConsumoDePetroleo.tex
#pdflatex --shell-escape  -interaction=batchmode NombreOscarYConsumoDePetroleo.tex
#latexmk -c NombreOscarYConsumoDePetroleo.tex

#pdflatex --shell-escape  -interaction=batchmode EjercicioIdentificacionModeloARIMA.tex
#pdflatex --shell-escape  -interaction=batchmode EjercicioIdentificacionModeloARIMA.tex
#latexmk -c EjercicioIdentificacionModeloARIMA.tex

#pdflatex --shell-escape  -interaction=batchmode SegundoEjercicioIdentificacionARIMA.tex
#pdflatex --shell-escape  -interaction=batchmode SegundoEjercicioIdentificacionARIMA.tex
#latexmk -c SegundoEjercicioIdentificacionARIMA.tex

#pdflatex --shell-escape  -interaction=batchmode IndicePreciosViviendasNuevasYdeSegundaMano.tex
#pdflatex --shell-escape  -interaction=batchmode IndicePreciosViviendasNuevasYdeSegundaMano.tex
#latexmk -c IndicePreciosViviendasNuevasYdeSegundaMano.tex

#pdflatex --shell-escape  -interaction=batchmode LetrasTesoroAmericano3y6meses.tex
#pdflatex --shell-escape  -interaction=batchmode LetrasTesoroAmericano3y6meses.tex
#latexmk -c LetrasTesoroAmericano3y6meses.tex

#pdflatex --shell-escape  -interaction=batchmode SerieCuentasFinancierasBE.tex
#pdflatex --shell-escape  -interaction=batchmode SerieCuentasFinancierasBE.tex
#latexmk -c SerieCuentasFinancierasBE.tex

#pdflatex --shell-escape  -interaction=batchmode FumadoresVsIncendios.tex
#pdflatex --shell-escape  -interaction=batchmode FumadoresVsIncendios.tex
#latexmk -c SerieCuentasFinancierasBE.tex

#+END_SRC


#+BEGIN_SRC emacs-lisp :results silent
(require 'ox-ipynb)
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc01.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc02.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc03.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc04.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc05.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc06.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc07.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc08.org")
#+END_SRC

# :tangle publish_notebooks.el 
#+BEGIN_SRC emacs-lisp :results silent
(require 'ox-ipynb)
(ox-ipynb-export-org-file-to-ipynb-file "lecciones/Lecc01.org")
(ox-ipynb-export-org-file-to-ipynb-file "lecciones/Lecc02.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc02.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc03.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc04.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc05.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc06.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc07.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc08.org")
#+END_SRC


#+BEGIN_SRC sh :results silent
emacs -q -l ~/Software/scimax/init.el -batch -nw -l publish.el
emacs -q -l ~/Software/scimax/init.el -batch -nw -l publish_notebooks.el
cd lecciones
jupyter nbconvert --config ../mycfg-GitHubPages.py --to slides --reveal-prefix reveal.js
mkdir CuadernosElectronicos
mkdir Transparencias
mv Lecc*.slides.html  Transparencias
mv Lecc*.ipynb CuadernosElectronicos
ln -s -r ./img/ ./Transparencias/
ln -s -r ./img/ ./CuadernosElectronicos/
rm -f Transparencias/reveal.js
ln -s -r ../reveal.js Transparencias/reveal.js
cd ..
rm -f ./docs/datos
ln -s -r ./datos/ ./docs/
emacs -q -l ~/Software/scimax/init.el -batch -nw -l static_publish.el
rm -f docs/Transparencias/reveal.js
ln -s -r ./reveal.js docs/Transparencias/reveal.js
#+END_SRC


** Org-publish                                                     :noexport:

#+BEGIN_SRC sh :results silent 
#emacs -q -l ~/Software/scimax/init.el lecciones/Lecc01.org --batch -f org-babel-execute-buffer --kill
#+END_SRC


Necesitamos un pequeño guión en =elisp= para ajustar la publicación.
# :tangle publish.el
#+BEGIN_SRC emacs-lisp 
(require 'package)

(add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)

(require 'use-package)
(use-package htmlize)

(require 'ox-publish)

(defun my-org-babel-execute-buffer ()
  "Ejecuta todos los bloques de código en el buffer actual."
  (org-babel-execute-buffer))

(defun my-org-html-publish-to-html (plist filename pub-dir)
  "Publica un archivo Org como HTML después de ejecutar los bloques de código."
  (with-current-buffer (find-file-noselect filename)
    ;(my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-html-publish-to-html plist filename pub-dir)))

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF después de ejecutar los bloques de código."
  (with-current-buffer (find-file-noselect filename)
    ;(my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,public-directory
                                     :exclude ".ipynb_checkpoints\\|00Notas.*\\|org-publisg.*\\|kk.*"
                                     :recursive t
                                     :publishing-function my-org-html-publish-to-html
                                     :auto-preamble t
                                     :auto-sitemap nil)
                                    
                                    ("pdf"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,(concat public-directory "pdfs")
                                     :exclude ".ipynb_checkpoints"
                                     :recursive t
                                     :publishing-function my-org-latex-publish-to-pdf
                                     :auto-preamble t
                                     :auto-sitemap nil)
                                    
                                    ("scimax-eln" :components ("html" "pdf")))))

  (org-publish "scimax-eln" t))
#+END_SRC

#+RESULTS:

# :tangle static_publish.el
#+BEGIN_SRC emacs-lisp :results silent
(require 'package)

(add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)

(require 'use-package)
(use-package htmlize)

(require 'ox-publish)

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("static-html"
                                     :base-directory ,base-directory
                                     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb\\|html"
                                     :publishing-directory ,public-directory
                                     :exclude "readtheorg_inline.theme\\|mycfg-GitHubPages.py\\|Lecc*.pdf"
                                     :recursive t
                                     :publishing-function org-publish-attachment)

                                    ("scimax-eln" :components ("static-html")))))

  (org-publish "scimax-eln" t))
#+END_SRC


#+BEGIN_SRC emacs-lisp :results silent
(require 'ox-publish)

(defun my-org-babel-execute-buffer ()
  "Ejecuta todos los bloques de código en el buffer actual."
  (org-babel-execute-buffer))

(defun my-org-html-publish-to-html (plist filename pub-dir)
  "Publica un archivo Org como HTML después de ejecutar los bloques de código."
  (with-current-buffer (find-file-noselect filename)
    ;(my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-html-publish-to-html plist filename pub-dir)))

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF después de ejecutar los bloques de código."
  (with-current-buffer (find-file-noselect filename)
    ;(my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,public-directory
                                     :exclude ".ipynb_checkpoints\\|00Notas.*\\|org-publisg.*\\|kk.*"
                                     :recursive t
                                     :publishing-function my-org-html-publish-to-html
                                     :auto-preamble t
                                     :auto-sitemap t)
                                    
                                    ("pdf"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,(concat public-directory "pdfs")
                                     :exclude ".ipynb_checkpoints"
                                     :recursive t
                                     :publishing-function my-org-latex-publish-to-pdf
                                     :auto-preamble t
                                     :auto-sitemap nil)
                                    
                                    ("static-html"
                                     :base-directory ,base-directory
                                     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb\\|html"
                                     :publishing-directory ,public-directory
                                     :exclude "docs\\|EjerciciosHide\\|.ipynb_checkpoints\\|org-publisg.*\\|kk.*\\|Lecc*.pdf"
                                     :recursive t
                                     :publishing-function org-publish-attachment)

                                    ("scimax-eln" :components ("html" "static-html" "pdf")))))

  (org-publish "scimax-eln" t))
#+END_SRC



Podemos chequear la versión local ejecutando el siguiente bloque

#+BEGIN_SRC emacs-lisp :results silent
(browse-url "docs/index.html")
#+END_SRC


#+BEGIN_SRC bash  :results silent
rm Lecc*.{pdf,slides.html}
#+END_SRC


*** Commit and publish the html pages                              :noexport:

To publish these we go into the html directory, commit all the files and push them to GitHUB.


#+BEGIN_SRC sh 
#git add docs
git commit -m "update"
git push
#+END_SRC



*** con pdfs

#+BEGIN_SRC emacs-lisp
(require 'ox-publish)

(let* ((base-directory "./")
       (public-directory "~/repos/Ectrkk/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
				     :base-directory ,base-directory
				     :base-extension "org"
				     :publishing-directory ,(concat public-directory "docs")
				     :exclude "docs"
				     :exclude "Calendario"
				     :exclude ".ipynb_checkpoints"
				     :exclude "reveal.js.old"
				     :exclude "USB"
				     :recursive t
				     :publishing-function org-html-publish-to-html
				     :auto-preamble t
				     :auto-sitemap t)
				    ("pdf"
				     :base-directory ,base-directory
				     :base-extension "org"
				     :publishing-directory ,(concat public-directory "docs/pdfs")
				     :exclude "docs"
				     :exclude "Calendario"
				     :exclude ".ipynb_checkpoints"
				     :exclude "reveal.js.old"
				     :exclude "USB"
				     :recursive t
				     :publishing-function org-latex-publish-to-pdf
				     :auto-preamble t
				     :auto-sitemap nil)
				    
				    ("static-html"
				     :base-directory ,base-directory
				     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|txt\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb"
				     :publishing-directory ,(concat public-directory "docs")
				     :exclude "docs"
				     :exclude "Calendario"
				     :exclude ".ipynb_checkpoints"
				     :exclude "reveal.js.old"
				     :exclude "USB"
				     :recursive t
				     :publishing-function org-publish-attachment)

				    ;; ... all the components ...
				    ("scimax-eln" :components ("html" "static-html" "pdf")))))

  (org-publish "scimax-eln" t))
#+END_SRC

#+RESULTS:

* COMMENT slides

[[https://nbconvert.readthedocs.io/en/latest/config_options.html][Configuración para nbconvert]] (las slides usan ficheros locales)

# :tangle mycfg.py
#+BEGIN_SRC python 
c = get_config()
c.NbConvertApp.notebooks = ["Lecc01.ipynb",
                            "Lecc02.ipynb",
                            "Lecc03.ipynb",
                            "Lecc04.ipynb",
                            "Lecc05.ipynb",
                            "Lecc06.ipynb"]
c.SlidesExporter.reveal_theme = 'solarized'
c.SlidesExporter.reveal_scroll = True
#+END_SRC

# :tangle custom.css
#+BEGIN_SRC css 
.slides {
  width: 90% !important;
}
#+END_SRC


#+BEGIN_SRC sh :results none
#jupyter nbconvert --config mycfg.py --to notebook
jupyter nbconvert --config mycfg.py --to slides 
#+END_SRC

# omite las celdas de código
#+BEGIN_SRC sh :results silent
#jupyter nbconvert --config mycfg.py --to notebook
jupyter nbconvert --config mycfg.py --to slides --no-input
#+END_SRC


# emacs --batch  --eval "(require 'org)(use-package ox-ipynb)" Lecc02.org --funcall ox-ipynb-export-org-file-to-ipynb-file

# emacsclient -e '(progn (switch-to-buffer "my-presentation.org") (org-beamer-export-to-pdf))'

# emacs --batch --load=plugin.el --load=my-funcs.el --eval=my-func file.v

# c.SlidesExporter.reveal_theme = 'beige'
# c.SlidesExporter.SlidesExporter.reveal_number = 'c/t'
# c.SlidesExporter.slideNumber = True
# c.SlidesExporter.reveal_width = 5500
# c.SlidesExporter.reveal_height = 800

