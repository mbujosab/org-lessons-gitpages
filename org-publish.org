#+TITLE: Publicaci√≥n de los ficheros org en GitHub pages
#+author: Marcos Bujosa
#+LANGUAGE: es

# +OPTIONS: toc:nil

#+TAGS: noexport
#+EXCLUDE_TAGS: noexport

#+startup: shrink

# ###########
# ESTO DA EL FORMATO FINAL DE LA P√ÅGINA WEB V√âASE [[https://olmon.gitlab.io/org-themes/]]
#+SETUPFILE: ../css/readtheorg_inline.theme
# ###########

#+LATEX_HEADER_EXTRA: \usepackage{fullpage}


#+LATEX_HEADER_EXTRA: \usepackage[spanish]{babel}
#+LATEX_HEADER_EXTRA: \usepackage{lmodern}
#+LATEX_HEADER_EXTRA: \usepackage{tabularx}
#+LATEX_HEADER_EXTRA: \usepackage{booktabs}

#+LATEX: \maketitle

* Fichero =makefile=

Genera el directorio p√∫blico =docs= con los ficheros para GitPages con subdirectorios para los =CuadernosElectronicos=, =pdfs=, =Transparencias= y los ficheros con las lecciones en ~html~.

#+BEGIN_SRC makefile :noweb no-export :results silent :exports none :tangle makefile
LECCIONES_SRC = ./org-lessons
LECCIONES_tmp = ./Lecciones
DOCS = ./docs
CUADERNOS = $(DOCS)/CuadernosElectronicos
TRANSPARENCIAS = $(DOCS)/Transparencias

SRC_FILES = $(LECCIONES_SRC)/Lecc*.org

.PHONY: all clean cleanAll directorios series_formales calendario notebooksYslides

all: calendario notebooksYslides practicas publicacion

calendario: $(DOCS)/Calendario-Econometria-Aplicada.pdf

$(DOCS)/Calendario-Econometria-Aplicada.pdf:
	emacs --batch Calendario/README.org -l org -f org-babel-tangle
	cd Calendario && make Calendario-Econometria-Aplicada.pdf

publicacion: $(patsubst $(LECCIONES_SRC)/%.org,$(CUADERNOS)/%.ipynb,$(wildcard $(SRC_FILES))) README.org index.org
	echo "FICHEROS EN CuadernosElectronicos y Transparencias?..."
	cp -a $(LECCIONES_tmp)/Lecc*.slides.html $(TRANSPARENCIAS)
	ls $(CUADERNOS)
	ls $(TRANSPARENCIAS)
	echo "EJECUCI√ìN DE publica.el..."
	emacs --batch \
	  --load ~/Software/scimax/init.el \
	  -l publica.el
	echo "FICHEROS EN Docs?..."
	ls $(DOCS)
	ls $(DOCS)/pdfs
	touch $@


notebooksYslides: $(patsubst $(LECCIONES_SRC)/%.org,$(CUADERNOS)/%.ipynb,$(wildcard $(SRC_FILES)))
	touch $@

$(CUADERNOS)/%.ipynb $(TRANSPARENCIAS)/%.slides.html: $(LECCIONES_SRC)/%.org
	make directorios
	make series_formales
	cp -a $(LECCIONES_SRC)/*.bib $(LECCIONES_tmp)
	cp -a $< $(LECCIONES_tmp)
	echo "EJECUCION DEL NOTEBOOK DE ORG: $(LECCIONES_tmp)/$(@F:.ipynb=.org)..."
	emacs -Q -l ~/Software/scimax/init.el $(LECCIONES_tmp)/$(@F:.ipynb=.org) --batch --eval "(org-babel-execute-buffer)" --eval "(save-buffer)" --kill
	echo "FICHEROS EN ./lecciones?..."
	ls $(LECCIONES_tmp)
	echo "FICHEROS EN ./docs/Lecciones/img?..."
	cp -a $(LECCIONES_tmp)/img $(DOCS)/Lecciones
	ls $(DOCS)/Lecciones/img
	ls $(DOCS)/Lecciones/img/lecc01
	echo "Contenido de img tras notebook:"
	find $(LECCIONES_tmp)/img
	echo "COPIO LO QUE SE HA GENERADO (.ipynb sin ejecutar y las im√°genes) A ./docs..."
	cp -a $(LECCIONES_tmp)/$(@F) $(CUADERNOS)
	ln -snf -r $(DOCS)/Lecciones/img/ $(TRANSPARENCIAS)/
	ln -snf -r $(DOCS)/Lecciones/img/ $(CUADERNOS)/
	ln -snf -r ./datos/ $(DOCS)
#	# Ejecutar el notebook con jupyter nbconvert
	echo "EJECUCION DEL NOTEBOOK DE JUPYTER..."
	jupyter nbconvert --execute --inplace $(LECCIONES_tmp)/$(@F) 
	echo "CREACI√ìN DE LAS SLIDES..."
	jupyter nbconvert --config mycfg-GitHubPages.py --to slides --reveal-prefix "https://unpkg.com/reveal.js@5.2.1" --execute $(LECCIONES_tmp)/$(@F) 
	echo "FICHEROS EN Docs ANTES DE PUBLICAR?..."
	ls $(DOCS)


# Lista de archivos fuente .org en org-practicas
PRACTICAS_SRC = $(wildcard org-practicas/*.org)

# Ficheros .done como se√±al de que fueron tanglados
PRACTICAS_DONE = $(patsubst org-practicas/%.org, $(LECCIONES_tmp)/Practicas/%.done, $(PRACTICAS_SRC))

#.PHONY: practicas

# Objetivo principal
practicas: $(PRACTICAS_DONE)
	@echo "‚úÖ Todas las pr√°cticas actualizadas."

#$(LECCIONES_tmp)/Practicas/%.done: org-practicas/%.org
#	echo "‚û°Ô∏è Copiando y ejecutando $< ..."
#	mkdir -p $(LECCIONES_tmp)/Practicas/guiones
#	cp $< $(LECCIONES_tmp)/Practicas/
#	cp -a org-practicas/hansl.tex $(LECCIONES_tmp)/Practicas/
#	cp -a ./datos $(LECCIONES_tmp)/Practicas
#	emacs --batch $< -l org -f org-babel-tangle
#	ls -lR $(LECCIONES_tmp)/Practicas/guiones  # Debug para Actions
#	echo "üß† Ejecutando org-babel-tangle y eval..."
#	set -e; \
#	if emacs --batch \
#	  --load ~/Software/scimax/init.el \
#	  $(LECCIONES_tmp)/Practicas/$*.org \
#	  --eval "(org-babel-tangle)" \
#	  --eval "(org-babel-execute-buffer)" \
#	  --eval "(save-buffer)" \
#	  --kill; then \
#	    echo "‚úÖ Correcto: $<"; \
#	    touch $@; \
#	else \
#	    echo "‚ùå Error al procesar $<"; \
#	    rm -f $@; \
#	    exit 1; \
#	fi

$(LECCIONES_tmp)/Practicas/%.done: org-practicas/%.org
	echo "‚û°Ô∏è Copiando y ejecutando $< ..."
	mkdir -p $(LECCIONES_tmp)/Practicas/guiones
	cp $< $(LECCIONES_tmp)/Practicas/
	cp -a org-practicas/hansl.tex $(LECCIONES_tmp)/Practicas/
	cp -a ./datos $(LECCIONES_tmp)/Practicas
	echo "üß† Ejecutando org-babel-tangle y eval..."
	set -e; \
	if emacs --batch \
	  --load ~/Software/scimax/init.el \
	  $(LECCIONES_tmp)/Practicas/$*.org \
	  --eval "(org-babel-execute-buffer)" \
	  --eval "(save-buffer)" \
	  --kill; then \
	    echo "‚úÖ Correcto: $<"; \
	    touch $@; \
	else \
	    echo "‚ùå Error al procesar $<"; \
	    rm -f $@; \
	    exit 1; \
	fi
	ls -lR $(LECCIONES_tmp)/Practicas/guiones  # Debug para Actions

## Regla para copiar, tanglear y ejecutar cada pr√°ctica
#$(LECCIONES_tmp)/Practicas/%.done: org-practicas/%.org
#	@echo "‚û°Ô∏è Copiando y ejecutando $< ..."
#	@mkdir -p $(LECCIONES_tmp)/Practicas
#	@cp $< $(LECCIONES_tmp)/Practicas/
#	emacs --batch \
#	  --load ~/Software/scimax/init.el \
#	  $(LECCIONES_tmp)/Practicas/$*.org \
#	  --eval "(org-babel-tangle)" \
#	  --eval "(org-babel-execute-buffer)" \
#	  --eval "(save-buffer)" \
#	  --kill
#	@touch $@


#practicas:
#	echo "‚û°Ô∏è Copiando pr√°cticas desde org-practicas/ a $(LECCIONES_tmp)/Practicas..."
#	mkdir -p $(LECCIONES_tmp)/Practicas/guiones
#	cp -a org-practicas/*.org $(LECCIONES_tmp)/Practicas/
#	cp -a org-practicas/hansl.tex $(LECCIONES_tmp)/Practicas/
#	echo "üß† Tangle y ejecuci√≥n de cada pr√°ctica..."
#	for f in $(LECCIONES_tmp)/Practicas/*.org; do \
#	  echo "üîß Procesando $$f..."; \
#	  emacs --batch \
#	        --load ~/Software/scimax/init.el \
#	        $$f \
#	        --eval "(org-babel-tangle)" \
#	        --eval "(org-babel-execute-buffer)" \
#	        --eval "(save-buffer)" \
#	        --kill; \
#	done
#	touch practicas

series_formales: $(LECCIONES_tmp)/src/implementacion_series_formales.org

$(LECCIONES_tmp)/src/implementacion_series_formales.org: $(LECCIONES_SRC)/src/implementacion_series_formales.org
	echo "INICIO IMPLEMENTACION_SERIES_FORMALES.ipynb..."
	make directorios
	cp $< $(LECCIONES_tmp)/src/
	emacs -q --batch $(LECCIONES_tmp)/src/implementacion_series_formales.org -l org -f org-babel-tangle
	cp -a $(LECCIONES_tmp)/src/implementacion_series_formales.py $(CUADERNOS)/src/
	ln -sf -r $(CUADERNOS)/src/implementacion_series_formales.py $(CUADERNOS)/
	emacs -q --batch \
	  --load ~/Software/scimax/init.el \
	  --eval "(require 'ox-ipynb)" \
	  --eval "(ox-ipynb-export-org-file-to-ipynb-file \"Lecciones/src/implementacion_series_formales.org\")"
	jupyter nbconvert --execute --inplace $(LECCIONES_tmp)/src/implementacion_series_formales.ipynb
	jupyter nbconvert --config mycfg-GitHubPages.py --to slides --reveal-prefix "https://unpkg.com/reveal.js@5.2.1" --execute $(LECCIONES_tmp)/src/implementacion_series_formales.ipynb
	jupyter nbconvert --execute --to html $(LECCIONES_tmp)/src/implementacion_series_formales.ipynb
	cp -a $(LECCIONES_tmp)/src/implementacion_series_formales.ipynb $(CUADERNOS)
	cp -a $(LECCIONES_tmp)/src/implementacion_series_formales.slides.html $(TRANSPARENCIAS)
	cp -a $(LECCIONES_tmp)/src/implementacion_series_formales.html $(DOCS)/Lecciones/src/
	echo "TERMINADO IMPLEMENTACION_SERIES_FORMALES.ipynb..."

directorios:
	mkdir -v -p $(LECCIONES_tmp)/src
	mkdir -v -p $(LECCIONES_tmp)/img
	ln -snf -r ./css/ $(LECCIONES_tmp)/
	mkdir -v -p $(DOCS)/pdfs
	mkdir -v -p $(DOCS)/Lecciones/img
	mkdir -v -p $(DOCS)/Lecciones/src
	mkdir -v -p $(TRANSPARENCIAS)
	mkdir -v -p $(CUADERNOS)/src
	touch directorios

clean:
	rm -r -f $(LECCIONES_tmp)

cleanAll: clean
	find $(DOCS)/ -mindepth 1 ! -name 'README.org' -exec rm -rf {} +
	rm -f directorios
	rm -f series_formales
	rm -f publicacion
	rm -f practicas
	rm -r -f logs
#+END_SRC

** Aclaraciones

El directorio =./Lecciones= es temporal. En dicho directorio se ejecutan los notebooks. Los ficheros creados se copian en distintos subdirectorios del directorio de publicaci√≥n =./docs/= (es el directorio de donde "cuelgan" las p√°ginas web; dichas p√°ginas se distribuyen desde la rama =gh-pages= del repositorio).


* Fichero =build.yml=

Contiene las instrucciones que ejecutar√° GitHub Actions en el repositorio.

Usa el contenido de la rama =main=. 
#+BEGIN_SRC yml :tangle .github/workflows/build.yml
name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git emacs pandoc aspell aspell-en aspell-es zip gretl
        pip install jupyter nbconvert

    - name: Install Python modules
      run: |
        pip install sympy numpy pandas matplotlib dataframe-image statsmodels seaborn

    - name: Verify Jupyter Installation
      run: |
        jupyter kernelspec list

    - name: Install LaTeX
      run: |
        sudo apt-get install -y texlive  texlive-latex-recommended texlive-latex-extra  texlive-fonts-extra texlive-fonts-recommended texlive-xetex texlive-science python3-pygments texlive-lang-spanish texlive-bibtex-extra texlive-binaries texlive-extra-utils texlive-font-utils texlive-luatex texlive-xetex dvipng

    - name: Disable tlmgr (prevent accidental calls)
      run: sudo mv /usr/bin/tlmgr /usr/bin/tlmgr.disabled || true

    - name: Clone Scimax
      run: |
        git clone https://github.com/jkitchin/scimax.git ~/Software/scimax

    - name: Download ox-ipynb.el
      run: |
        wget https://raw.githubusercontent.com/jkitchin/ox-ipynb/master/ox-ipynb.el -O ~/Software/scimax/ox-ipynb.el

    - name: Install s.el and dash.el
      run: |
        emacs --batch --eval "(require 'package)" \
                      --eval "(add-to-list 'package-archives '(\"melpa\" . \"https://melpa.org/packages/\"))" \
                      --eval "(package-refresh-contents)" \
                      --eval "(package-install 's)" \
                      --eval "(package-install 'dash)"

    - name: Create no-tlmgr.el
      run: |
        mkdir -p ~/.emacs.d
        echo "(setq system-packages-use-sudo nil)" > ~/.emacs.d/no-tlmgr.el
        echo "(setq TeX-install-font-lock nil)" >> ~/.emacs.d/no-tlmgr.el
        echo "(setq TeX-live-install-texmf nil)" >> ~/.emacs.d/no-tlmgr.el

    - name: Verify ox-ipynb Installation
      run: |
        emacs --batch \
              --eval "(add-to-list 'load-path \"~/Software/scimax/\")" \
              --eval "(dolist (dir (directory-files \"~/.emacs.d/elpa/\" t \"^[^.]\")) (add-to-list 'load-path dir))" \
              --eval "(require 'ox-ipynb)"

    - name: Execute Makefile notebooksYslides
      run: |
        make notebooksYslides

    - name: Inspecci√≥n contenido de Lecciones/img
      run: |
        echo "CONTENIDO DE IMG TRAS NOTEBOOK:"
        find ./Lecciones/img

    - name: Execute Makefile publicacion
      run: |
        make practicas publicacion calendario

    - name: Deploy docs/ a gh-pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GH_PAGES_TOKEN }}
        publish_dir: ./docs
        publish_branch: gh-pages
        destination_dir: docs
#+END_SRC

#    - name: Crear local-init.el para Emacs
#      run: |
#        mkdir -p ~/Software/scimax
#        echo "(setq straight-vc-git-default-clone-depth nil)" > ~/Software/scimax/local-init.el
#        echo "(condition-case err" >> ~/Software/scimax/local-init.el
#        echo "    (straight-use-package 'nongnu-elpa)" > ~/Software/scimax/local-init.el
#        echo "(error (message "straight.el failed: %s" err)))" > ~/Software/scimax/local-init.el


** Aclaraciones

**** tlmgr
Scimax intenta usar ~tlmgr~ para instalar paquetes de $\LaTeX{}$, pero =Actions= de =GitHub= no lo permite. Las medidas tomadas para evitar este problema han sido 
1. crear un fichero =~/.emacs.d/no-tlmgr.el= con el siguiente contenido
   #+BEGIN_SRC 
(setq system-packages-use-sudo nil)
(setq TeX-install-font-lock nil)
   #+END_SRC
   De manera que al publicar se llama a scimax del siguiente modo
   #+BEGIN_SRC 
emacs --batch \
  --load ~/.emacs.d/no-tlmgr.el \
  --load ~/Software/scimax/init.el \
  -l publica.el
   #+END_SRC
2. En ~.github/workflows/build.yml~ he a√±adido
   #+BEGIN_SRC 
    - name: Disable tlmgr (prevent accidental calls)
      run: sudo mv /usr/bin/tlmgr /usr/bin/tlmgr.disabled || true
   #+END_SRC

Quiz√° sea suficiente solo con esto segundo. Si quito el fichero =~/.emacs.d/no-tlmgr.el=, tambi√©n he de omitirlo en las llamadas a emacs.

**** Figuras en =.png=

No lo tengo claro, pero creo que 
#+BEGIN_SRC 
    - name: Set MPLBACKEND (matplotlib)
      run: echo "MPLBACKEND=Agg" >> $GITHUB_ENV
#+END_SRC
se puede borrar, puesto que al final he tenido que a√±adir ~plt.savefig(nombre_fichero, dpi=300, bbox_inches='tight')~ expl√≠citamente en los bloques de python. En el notebook creo que tambi√©n se puede quitar los de ~Agg~. Lo de ~Agg~ es una sugerencia de Copilot porque no se generaban los ficheros ~.png~. Pero como ahora se indica expl√≠citamente en el c√≥digo pyton con ~plt.savefig~, es posible que se pueda omitir (v√©ase la conversaci√≥n con Copilot a continuaci√≥n).


*** Consulta a Copilot sobre la generaci√≥n de figuras

#+BEGIN_QUOTE
Anteriormente faltaba por instalar el paquete dvipng. Una vez instalado dvipng, el bloque de c√≥digo:

#+BEGIN_SRC jupyter-python :results file :exports results
plt.plot([1,2,3],[4,5,6])
plt.savefig("img/prueba_action.png")
"img/prueba_action.png"
#+END_SRC

ha creado correctamente el fichero "img/prueba_action.png" con la figura. Sin embargo, el bloque

#+BEGIN_SRC jupyter-python :results file :file ./img/lecc01/PIB_UEM.png
df1.plot(x='obs',xlabel='',figsize=(15,4)).set_title('PIB zona euro',fontsize=18)
#+END_SRC

no ha creado el fichero ./img/lecc01/PIB_UEM.png con su correspondiente figura.
#+END_QUOTE


¬°Excelente que la instalaci√≥n de dvipng haya solucionado la generaci√≥n de im√°genes para el primer bloque!  
Ahora, pasemos a analizar por qu√© el segundo bloque *no genera* el archivo `./img/lecc01/PIB_UEM.png`.

-----

**** Diagn√≥stico y causas probables

***** 1. Diferencia clave entre ambos bloques

- *Bloque que funciona:*

  #+BEGIN_SRC org
  #+BEGIN_SRC jupyter-python :results file :exports results
  plt.plot([1,2,3],[4,5,6])
  plt.savefig("img/prueba_action.png")
  "img/prueba_action.png"
  #+END_SRC
  #+END_SRC

  - Aqu√≠, t√∫ generas la figura y la guardas expl√≠citamente con `plt.savefig()`, y luego devuelves el nombre del archivo en la √∫ltima l√≠nea.

- *Bloque que falla:*

  #+BEGIN_SRC org
  #+BEGIN_SRC jupyter-python :results file :file ./img/lecc01/PIB_UEM.png
  df1.plot(x='obs',xlabel='',figsize=(15,4)).set_title('PIB zona euro',fontsize=18)
  #+END_SRC
  #+END_SRC

  - Aqu√≠ conf√≠as en que org-babel/jupyter-python guardar√° autom√°ticamente la figura en `:file`, pero el m√©todo pandas `df.plot()` *no guarda ni devuelve* el archivo.

***** 2. ¬øPor qu√© falla el segundo bloque?

- El argumento `:file ./img/lecc01/PIB_UEM.png` espera que el √∫ltimo comando del bloque *guarde la imagen en ese path* (o devuelva una figura que org/jupyter pueda guardar ah√≠).
- El m√©todo `df1.plot(...).set_title(...)` crea y modifica una figura activa, pero *no la guarda*.
- Si usas solo `set_title()`, no hay ninguna instrucci√≥n para guardar el gr√°fico.
- Por defecto, ni org-babel ni jupyter-python pueden adivinar que la figura debe ser guardada en ese path si no se lo indicas de forma expl√≠cita.

-----

**** Soluci√≥n recomendada

*Debes guardar la figura manualmente al path especificado*, y devolver ese path como resultado del bloque.

***** Forma correcta:

#+BEGIN_SRC jupyter-python :results file :file ./img/lecc01/PIB_UEM.png
ax = df1.plot(x='obs', xlabel='', figsize=(15,4))
ax.set_title('PIB zona euro', fontsize=18)
import matplotlib.pyplot as plt
plt.savefig("./img/lecc01/PIB_UEM.png")
"./img/lecc01/PIB_UEM.png"
#+END_SRC

- Esto asegura que la imagen se guarda donde deseas y que el bloque devuelve el path correcto para que org-babel inserte la imagen en el documento.

***** Alternativas

- Si usas solo `:results file` sin `:file`, puedes devolver el nombre del archivo en la √∫ltima l√≠nea.
- Siempre aseg√∫rate de llamar a `plt.savefig()` *despu√©s* de crear el gr√°fico.

-----

**** Resumen

- El bloque con `plt.savefig(...)` funciona porque guarda expl√≠citamente la imagen.
- El bloque con pandas `plot` y solo `set_title()` *NO guarda la imagen*; debes a√±adir `plt.savefig()` y devolver el path.
- As√≠, org-babel/jupyter-python incrustar√° correctamente la imagen en el documento exportado.

-----

¬øTe gustar√≠a que te ayude a actualizar todos los bloques de tu .org para que usen esta t√©cnica, o necesitas una gu√≠a para automatizar este patr√≥n?

#+BEGIN_QUOTE
Sin embargo. Cuando ejecuto localmente el fichero org s√≠ se crean las figuras en mi disco. ¬øHay alg√∫n modo de que tambi√©n se creen con Actions sin modificar los bloques? Es decir, ¬øhay alg√∫n modo de que funcionen tal y como est√°n ahora mismo?
#+END_QUOTE

¬°Esta es una pregunta muy frecuente al usar org-babel/jupyter en entornos CI/CD!  
La diferencia entre tu entorno local y GitHub Actions suele deberse a *la configuraci√≥n del entorno gr√°fico* y de *matplotlib*.

-----

**** ¬øPor qu√© funciona localmente pero no en Actions?

- *Localmente*, matplotlib tiene acceso a un entorno gr√°fico (X11, Wayland, etc.) y suele usar un backend como `TkAgg`, `Qt5Agg`,‚Ä¶
- *En GitHub Actions* (o cualquier entorno headless), *matplotlib no tiene acceso a un display* y por defecto puede intentar usar un backend que requiere uno, lo que impide guardar im√°genes.

***** Backend headless necesario

Para guardar im√°genes sin display, *matplotlib debe usar un backend como "Agg"*.

-----

**** Soluci√≥n: Forzar el backend "Agg" para matplotlib

Esto se puede hacer *sin modificar los bloques* a√±adiendo una configuraci√≥n previa en tu flujo de trabajo o al comienzo de la ejecuci√≥n.

***** Opci√≥n 1: Variable de entorno en el workflow

A√±ade esto antes de ejecutar Emacs en tu `build.yml`:

#+BEGIN_SRC yaml
- name: Set MPLBACKEND (matplotlib)
  run: echo "MPLBACKEND=Agg" >> $GITHUB_ENV
#+END_SRC

Matplotlib detectar√° esto y usar√° el backend adecuado.

***** Opci√≥n 2: Variable de entorno en shell

O directamente en el comando de ejecuci√≥n:

#+BEGIN_SRC bash
MPLBACKEND=Agg emacs -Q -l ~/Software/scimax/init.el ./lecciones/Lecc01.org --batch ...
#+END_SRC

***** Opci√≥n 3: Configuraci√≥n en Emacs/jupyter-python

Si puedes modificar la configuraci√≥n de Emacs que se carga, a√±ade a tu init.el o a la cabecera de los bloques:

#+BEGIN_SRC python
import matplotlib
matplotlib.use("Agg")
#+END_SRC

Pero esto requerir√≠a modificar los bloques, que quieres evitar.

-----

**** Resumen

- *El problema*: matplotlib necesita el backend "Agg" para funcionar headless.
- *La soluci√≥n sin modificar los bloques*: establece la variable de entorno `MPLBACKEND=Agg` en el workflow antes de ejecutar Emacs.
- *As√≠*, los bloques que generan im√°genes funcionar√°n igual en Actions que localmente, *sin necesidad de cambiar el c√≥digo de los bloques*.


* Script =publica.el= de elisp para publicar los =.org= es formato =pdf= y ~html~

Este script transforma los ficheros org de las lecciones en pdfs y htmls. 

#+BEGIN_SRC  emacs-lisp :tangle publica.el :results silent
;;; publica.el --- Publicaci√≥n HTML y PDF para el repositorio Scimax-ELN

(require 'ox-publish)

(setq org-confirm-babel-evaluate nil
      org-export-with-broken-links t
      org-html-validation-link nil
      org-html-head-include-scripts nil
      org-html-head-include-default-style nil)

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF tras ejecutar bloques de c√≥digo."
  (message "Exportando a PDF: %s" filename)
  (with-current-buffer (find-file-noselect filename)
    ;(org-babel-execute-buffer)
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./"))
  (setq org-publish-project-alist
        (append org-publish-project-alist
                `(("index"
                   :base-directory ,base-directory
                   :base-extension "org"
                   :publishing-directory ,(concat base-directory "docs")
                   :exclude "src\\|Calendario\\|org-lessons\\|org-practicas\\|docs\\|chatCopilot.org\\|org-publish.org\\|README.org"
                   :recursive t
                   :publishing-function org-html-publish-to-html
                   :auto-preamble t
                   :auto-sitemap t
                   :with-author nil
                   :with-creator nil
                   :with-toc t
                   :section-numbers nil)

                  ("pdf"
                   :base-directory "./Lecciones/"
                   :base-extension "org"
                   :publishing-directory ,(concat base-directory "docs/pdfs")
                   :exclude "src\\|org-lessons\\|org-practicas"
                   :recursive t
                   :publishing-function my-org-latex-publish-to-pdf
                   :auto-preamble t)

                  ("static-index"
                   :base-directory ,base-directory
                   :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|txt\\|svg\\|aiff\\|inp"
                   :publishing-directory ,(concat base-directory "docs")
                   :exclude "src\\|Calendario\\|org-lessons\\|org-practicas\\|docs\\|chatCopilot.*\\|org-publish.*\\|README.org"
                   :recursive t
                   :publishing-function org-publish-attachment)

                  ("web-repositorio" :components ("index" "pdf" "static-index")))))

  (message "üü¢ Iniciando publicaci√≥n del √≠ndice (web-repositorio)...")
  (org-publish "web-repositorio" t)
  (message "‚úÖ Publicaci√≥n del √≠ndice completada."))

(unless (file-directory-p "logs")
  (make-directory "logs"))
(with-temp-file "logs/publica.log"
  (insert (format "Publicado el %s\n" (current-time-string))))

#+END_SRC

Podemos chequear la versi√≥n local ejecutando el siguiente bloque

#+BEGIN_SRC emacs-lisp :results silent
(browse-url "docs/index.html")
#+END_SRC


# ("images"
#                    :base-directory "./Lecciones/img/"
#                    :base-extension "jpg\\|gif\\|png"
#                    :publishing-directory ,(concat base-directory "docs/img")
#                    :publishing-function org-publish-attachment)
# 
#                   
# ;(let* ((base-directory "./lecciones/")
# ;       (public-directory "./docs/"))
# ;  (setq org-publish-project-alist
# ;        `(("images"
# ;           :base-directory "./lecciones/img/"
# ;           :base-extension "jpg\\|gif\\|png"
# ;           :publishing-directory ,(concat public-directory "img")
# ;           :publishing-function org-publish-attachment)
# ;
# ;          ("html"
# ;           :base-directory ,base-directory
# ;           :base-extension "org"
# ;           :publishing-directory ,public-directory
# ;           :exclude "src"
# ;           :recursive t
# ;           :publishing-function org-html-publish-to-html
# ;           :auto-preamble t)
# ;
# ;          ("pdf"
# ;           :base-directory ,base-directory
# ;           :base-extension "org"
# ;           :publishing-directory ,(concat public-directory "pdfs")
# ;           :exclude "src"
# ;           :recursive t
# ;           :publishing-function my-org-latex-publish-to-pdf
# ;           :auto-preamble t)
# ;
# ;          ("static-html"
# ;           :base-directory ,base-directory
# ;           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|txt\\|svg\\|aiff\\|csv\\|gdt\\|inp"
# ;           :publishing-directory ,public-directory
# ;           :exclude "src"
# ;           :recursive t
# ;           :publishing-function org-publish-attachment)
# ;
# ;          ("scimax-eln" :components ("html" "static-html" "pdf" "images"))))
# ;
# ;  (message "üü¢ Iniciando publicaci√≥n de lecciones (scimax-eln)...")
# ;  (org-publish "scimax-eln" t)
# ;  (message "‚úÖ Publicaci√≥n de lecciones completada."))


* slides para GitHubpages

#+BEGIN_SRC python :tangle mycfg-GitHubPages.py
c = get_config()

c.SlidesExporter.reveal_theme = 'solarized'
c.SlidesExporter.reveal_scroll = True
c.SlidesExporter.language_code = 'es'

c.SlidesExporter.mathjax_url = "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"

c.SlidesExporter.jquery_url = "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"

c.SlidesExporter.require_js_url = "https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js"
#+END_SRC


[[https://nbconvert.readthedocs.io/en/latest/config_options.html][Configuraci√≥n para nbconvert]] (las slides usan ficheros de la web para poder funcionar en GitHubPages)

[[https://dbafromthecold.com/2021/02/21/creating-presentations-with-reveal-and-github-pages/][creating-presentations-with-reveal-and-github-pages]]

https://github.com/RichardAfolabi/Presentation_js

https://emasuriano.com/til/2024-07-01-create-presentations-from-notebook/

https://github.com/yjwen/org-reveal
https://github.com/hexmode/ox-reveal


* COMMENT √ëordas                                                   :noexport:

#+BEGIN_SRC sh :results silent
jupyter nbconvert --config mycfg-GitHubPages.py --to slides --reveal-prefix reveal.js --no-input
#+END_SRC


#+BEGIN_SRC emacs-lisp
(require 'ox-ipynb)
(ox-ipynb-export-org-file-to-ipynb-file "Lecc01.org")
(ox-ipynb-export-org-file-to-ipynb-file "Lecc02.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc03.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc04.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc05.org")
#+END_SRC

#+RESULTS:
: Lecc01.ipynb


# jupyter nbconvert --config mycfg.py
# jupyter nbconvert --config mycfg.py  --to slides --reveal-prefix reveal.js
# jupyter nbconvert --config mycfg.py  --to slides --offline embed --reveal-prefix reveal.js

¬øfurula? NO
#+BEGIN_SRC emacs-lisp
(require 'package)

(add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)

(require 'use-package)
(use-package htmlize)

(require 'ox-publish)
;(use-package htmlize)

;(require 'ox-publish)

(defun my-org-babel-execute-buffer ()
  "Ejecuta todos los bloques de c√≥digo en el buffer actual."
  (org-babel-execute-buffer))

(defun my-org-html-publish-to-html (plist filename pub-dir)
  "Publica un archivo Org como HTML despu√©s de ejecutar los bloques de c√≥digo."
  (with-current-buffer (find-file-noselect filename)
    (my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-html-publish-to-html plist filename pub-dir)))

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF despu√©s de ejecutar los bloques de c√≥digo."
  (with-current-buffer (find-file-noselect filename)
    (my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,public-directory
                                     :exclude "docs\\|EjerciciosHide\\|SeriesSimuladas4\\|SeriesSimuladas12\\|Calendario\\|notas.*\\|.ipynb_checkpoints\\|00Notas.*\\|org-publisg.*\\|kk.*"
                                     :recursive t
                                     :publishing-function my-org-html-publish-to-html
                                     :auto-preamble t
                                     :auto-sitemap t)
                                    
                                    ("pdf"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,(concat public-directory "pdfs")
                                     :exclude "docs"
                                     :exclude "Calendario"
                                     :exclude ".ipynb_checkpoints"
                                     :exclude "reveal.js.old"
                                     :exclude "notas.*"
                                     :exclude "USB"
                                     :recursive t
                                     :publishing-function my-org-latex-publish-to-pdf
                                     :auto-preamble t
                                     :auto-sitemap nil)
                                    
                                    ("static-html"
                                     :base-directory ,base-directory
                                     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb\\|html"
                                     :publishing-directory ,public-directory
                                     :exclude "docs\\|EjerciciosHide\\|SeriesSimuladas4\\|SeriesSimuladas12\\|notas.*\\|.ipynb_checkpoints\\|org-publisg.*\\|kk.*\\|Lecc*.pdf"
                                     :recursive t
                                     :publishing-function org-publish-attachment)

                                    ("scimax-eln" :components ("html" "static-html" "pdf")))))

  (org-publish "scimax-eln" t))
#+END_SRC

#+RESULTS:



#+BEGIN_SRC emacs-lisp
(require 'package)

(add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)

(require 'use-package)
(use-package htmlize)

(require 'ox-publish)

(defun my-org-babel-execute-buffer ()
  "Ejecuta todos los bloques de c√≥digo en el buffer actual."
  (org-babel-execute-buffer))

(defun my-org-html-publish-to-html (plist filename pub-dir)
  "Publica un archivo Org como HTML despu√©s de ejecutar los bloques de c√≥digo."
  (with-current-buffer (find-file-noselect filename)
    (my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-html-publish-to-html plist filename pub-dir)))

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF despu√©s de ejecutar los bloques de c√≥digo."
  (with-current-buffer (find-file-noselect filename)
    (my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,public-directory
                                     :exclude "docs\\|EjerciciosHide\\|SeriesSimuladas4\\|SeriesSimuladas12\\|Calendario\\|notas.*\\|.ipynb_checkpoints\\|00Notas.*\\|org-publisg.*\\|kk.*"
                                     :recursive t
                                     :publishing-function my-org-html-publish-to-html
                                     :auto-preamble t
                                     :auto-sitemap t)
                                    
                                    ("pdf"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,(concat public-directory "pdfs")
                                     :exclude "docs"
                                     :exclude "Calendario"
                                     :exclude ".ipynb_checkpoints"
                                     :exclude "reveal.js.old"
                                     :exclude "notas.*"
                                     :exclude "USB"
                                     :recursive t
                                     :publishing-function my-org-latex-publish-to-pdf
                                     :auto-preamble t
                                     :auto-sitemap nil)
                                    
                                    ("static-html"
                                     :base-directory ,base-directory
                                     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb\\|html"
                                     :publishing-directory ,public-directory
                                     :exclude "docs\\|EjerciciosHide\\|SeriesSimuladas4\\|SeriesSimuladas12\\|notas.*\\|.ipynb_checkpoints\\|org-publisg.*\\|kk.*\\|Lecc*.pdf"
                                     :recursive t
                                     :publishing-function org-publish-attachment)

                                    ("scimax-eln" :components ("html" "static-html" "pdf")))))

  (org-publish "scimax-eln" t))
#+END_SRC

clean:
	rm -r -f $(DOCS)
	rm -r -f $(LECCIONES)
	rm -f directorios
	rm -f series_formales


#+BEGIN_SRC bash  :results silent
rm Lecc*.{pdf,slides.html}
#+END_SRC

#+BEGIN_SRC  makefile :noweb no-export :results silent :exports none 
OUT_DIR=./
# Using GNU Make-specific functions here
FILES=$(patsubst Lecc%.org,$(OUT_DIR)/Lecc%.tex,$(wildcard *.org))
PDF-FILES=$(patsubst Lecc%.tex,$(OUT_DIR)/Lecc%.pdf,$(wildcard *.tex))

#.PHONY: all clean install-doc
.PHONY: all install-doc

Lecc01.pdf: %.tex
	latexmk -c $@ 

all: install-doc

#install-doc: $(FILES)  $(PDF-FILES)
install-doc: $(PDF-FILES)

$(OUT_DIR):
	mkdir -v -p $(OUT_DIR)

#%.tex: %.org
#	emacs -q -l ~/Software/scimax/init.el $< --batch -f org-latex-export-to-latex --kill

%.pdf: %.tex
	latexmk -pdf --shell-escape -interaction=batchmode $< 
	latexmk -c

pedeefes: %.pdf

#$(OUT_DIR)/%.tex: %.tex
#	install -v -m 644 -t $(OUT_DIR) $<
#	rm $<
$(OUT_DIR)/%.pdf: %.pdf
	install -v -m 644 -t ./notas $<

#clean:
#	rm *.tex
#+END_SRC


* COMMENT otros                                                    :noexport:

#+BEGIN_SRC sh :results silent
#pdflatex --shell-escape  -interaction=batchmode Lecc01.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc01.tex
#latexmk -c Lecc01.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc02.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc02.tex
#latexmk -c Lecc02.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc03.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc03.tex
#latexmk -c Lecc03.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc04.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc04.tex
#latexmk -c Lecc04.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc05.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc05.tex
#latexmk -c Lecc05.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc06.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc06.tex
#latexmk -c Lecc06.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc07.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc07.tex
#latexmk -c Lecc07.tex

#pdflatex --shell-escape  -interaction=batchmode Lecc08.tex
#pdflatex --shell-escape  -interaction=batchmode Lecc08.tex
#latexmk -c Lecc08.tex

#+END_SRC


#+BEGIN_SRC sh  :results silent :dir ./Ejercicios

#pdflatex --shell-escape  -interaction=batchmode mortality-marriages.tex
#pdflatex --shell-escape  -interaction=batchmode mortality-marriages.tex
#latexmk -c mortality-marriages.tex

#pdflatex --shell-escape  -interaction=batchmode NombreOscarYConsumoDePetroleo.tex
#pdflatex --shell-escape  -interaction=batchmode NombreOscarYConsumoDePetroleo.tex
#latexmk -c NombreOscarYConsumoDePetroleo.tex

#pdflatex --shell-escape  -interaction=batchmode EjercicioIdentificacionModeloARIMA.tex
#pdflatex --shell-escape  -interaction=batchmode EjercicioIdentificacionModeloARIMA.tex
#latexmk -c EjercicioIdentificacionModeloARIMA.tex

#pdflatex --shell-escape  -interaction=batchmode SegundoEjercicioIdentificacionARIMA.tex
#pdflatex --shell-escape  -interaction=batchmode SegundoEjercicioIdentificacionARIMA.tex
#latexmk -c SegundoEjercicioIdentificacionARIMA.tex

#pdflatex --shell-escape  -interaction=batchmode IndicePreciosViviendasNuevasYdeSegundaMano.tex
#pdflatex --shell-escape  -interaction=batchmode IndicePreciosViviendasNuevasYdeSegundaMano.tex
#latexmk -c IndicePreciosViviendasNuevasYdeSegundaMano.tex

#pdflatex --shell-escape  -interaction=batchmode LetrasTesoroAmericano3y6meses.tex
#pdflatex --shell-escape  -interaction=batchmode LetrasTesoroAmericano3y6meses.tex
#latexmk -c LetrasTesoroAmericano3y6meses.tex

#pdflatex --shell-escape  -interaction=batchmode SerieCuentasFinancierasBE.tex
#pdflatex --shell-escape  -interaction=batchmode SerieCuentasFinancierasBE.tex
#latexmk -c SerieCuentasFinancierasBE.tex

#pdflatex --shell-escape  -interaction=batchmode FumadoresVsIncendios.tex
#pdflatex --shell-escape  -interaction=batchmode FumadoresVsIncendios.tex
#latexmk -c SerieCuentasFinancierasBE.tex

#+END_SRC


#+BEGIN_SRC emacs-lisp :results silent
(require 'ox-ipynb)
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc01.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc02.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc03.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc04.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc05.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc06.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc07.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc08.org")
#+END_SRC

# :tangle publish_notebooks.el 
#+BEGIN_SRC emacs-lisp :results silent
(require 'ox-ipynb)
(ox-ipynb-export-org-file-to-ipynb-file "lecciones/Lecc01.org")
(ox-ipynb-export-org-file-to-ipynb-file "lecciones/Lecc02.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc02.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc03.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc04.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc05.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc06.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc07.org")
;(ox-ipynb-export-org-file-to-ipynb-file "Lecc08.org")
#+END_SRC


#+BEGIN_SRC sh :results silent
emacs -q -l ~/Software/scimax/init.el -batch -nw -l publish.el
emacs -q -l ~/Software/scimax/init.el -batch -nw -l publish_notebooks.el
cd lecciones
jupyter nbconvert --config ../mycfg-GitHubPages.py --to slides --reveal-prefix reveal.js
mkdir CuadernosElectronicos
mkdir Transparencias
mv Lecc*.slides.html  Transparencias
mv Lecc*.ipynb CuadernosElectronicos
ln -s -r ./img/ ./Transparencias/
ln -s -r ./img/ ./CuadernosElectronicos/
rm -f Transparencias/reveal.js
ln -s -r ../reveal.js Transparencias/reveal.js
cd ..
rm -f ./docs/datos
ln -s -r ./datos/ ./docs/
emacs -q -l ~/Software/scimax/init.el -batch -nw -l static_publish.el
rm -f docs/Transparencias/reveal.js
ln -s -r ./reveal.js docs/Transparencias/reveal.js
#+END_SRC


** Org-publish                                                     :noexport:

#+BEGIN_SRC sh :results silent 
#emacs -q -l ~/Software/scimax/init.el lecciones/Lecc01.org --batch -f org-babel-execute-buffer --kill
#+END_SRC


Necesitamos un peque√±o gui√≥n en =elisp= para ajustar la publicaci√≥n.
# :tangle publish.el
#+BEGIN_SRC emacs-lisp 
(require 'package)

(add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)

(require 'use-package)
(use-package htmlize)

(require 'ox-publish)

(defun my-org-babel-execute-buffer ()
  "Ejecuta todos los bloques de c√≥digo en el buffer actual."
  (org-babel-execute-buffer))

(defun my-org-html-publish-to-html (plist filename pub-dir)
  "Publica un archivo Org como HTML despu√©s de ejecutar los bloques de c√≥digo."
  (with-current-buffer (find-file-noselect filename)
    ;(my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-html-publish-to-html plist filename pub-dir)))

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF despu√©s de ejecutar los bloques de c√≥digo."
  (with-current-buffer (find-file-noselect filename)
    ;(my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,public-directory
                                     :exclude ".ipynb_checkpoints\\|00Notas.*\\|org-publisg.*\\|kk.*"
                                     :recursive t
                                     :publishing-function my-org-html-publish-to-html
                                     :auto-preamble t
                                     :auto-sitemap nil)
                                    
                                    ("pdf"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,(concat public-directory "pdfs")
                                     :exclude ".ipynb_checkpoints"
                                     :recursive t
                                     :publishing-function my-org-latex-publish-to-pdf
                                     :auto-preamble t
                                     :auto-sitemap nil)
                                    
                                    ("scimax-eln" :components ("html" "pdf")))))

  (org-publish "scimax-eln" t))
#+END_SRC

#+RESULTS:

# :tangle static_publish.el
#+BEGIN_SRC emacs-lisp :results silent
(require 'package)

(add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)

(require 'use-package)
(use-package htmlize)

(require 'ox-publish)

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("static-html"
                                     :base-directory ,base-directory
                                     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb\\|html"
                                     :publishing-directory ,public-directory
                                     :exclude "readtheorg_inline.theme\\|mycfg-GitHubPages.py\\|Lecc*.pdf"
                                     :recursive t
                                     :publishing-function org-publish-attachment)

                                    ("scimax-eln" :components ("static-html")))))

  (org-publish "scimax-eln" t))
#+END_SRC


#+BEGIN_SRC emacs-lisp :results silent
(require 'ox-publish)

(defun my-org-babel-execute-buffer ()
  "Ejecuta todos los bloques de c√≥digo en el buffer actual."
  (org-babel-execute-buffer))

(defun my-org-html-publish-to-html (plist filename pub-dir)
  "Publica un archivo Org como HTML despu√©s de ejecutar los bloques de c√≥digo."
  (with-current-buffer (find-file-noselect filename)
    ;(my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-html-publish-to-html plist filename pub-dir)))

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF despu√©s de ejecutar los bloques de c√≥digo."
  (with-current-buffer (find-file-noselect filename)
    ;(my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,public-directory
                                     :exclude ".ipynb_checkpoints\\|00Notas.*\\|org-publisg.*\\|kk.*"
                                     :recursive t
                                     :publishing-function my-org-html-publish-to-html
                                     :auto-preamble t
                                     :auto-sitemap t)
                                    
                                    ("pdf"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,(concat public-directory "pdfs")
                                     :exclude ".ipynb_checkpoints"
                                     :recursive t
                                     :publishing-function my-org-latex-publish-to-pdf
                                     :auto-preamble t
                                     :auto-sitemap nil)
                                    
                                    ("static-html"
                                     :base-directory ,base-directory
                                     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb\\|html"
                                     :publishing-directory ,public-directory
                                     :exclude "docs\\|EjerciciosHide\\|.ipynb_checkpoints\\|org-publisg.*\\|kk.*\\|Lecc*.pdf"
                                     :recursive t
                                     :publishing-function org-publish-attachment)

                                    ("scimax-eln" :components ("html" "static-html" "pdf")))))

  (org-publish "scimax-eln" t))
#+END_SRC



Podemos chequear la versi√≥n local ejecutando el siguiente bloque

#+BEGIN_SRC emacs-lisp :results silent
(browse-url "docs/index.html")
#+END_SRC


#+BEGIN_SRC bash  :results silent
rm Lecc*.{pdf,slides.html}
#+END_SRC


*** Commit and publish the html pages                              :noexport:

To publish these we go into the html directory, commit all the files and push them to GitHUB.


#+BEGIN_SRC sh 
#git add docs
git commit -m "update"
git push
#+END_SRC



*** con pdfs

#+BEGIN_SRC emacs-lisp
(require 'ox-publish)

(let* ((base-directory "./")
       (public-directory "~/repos/Ectrkk/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
				     :base-directory ,base-directory
				     :base-extension "org"
				     :publishing-directory ,(concat public-directory "docs")
				     :exclude "docs"
				     :exclude "Calendario"
				     :exclude ".ipynb_checkpoints"
				     :exclude "reveal.js.old"
				     :exclude "USB"
				     :recursive t
				     :publishing-function org-html-publish-to-html
				     :auto-preamble t
				     :auto-sitemap t)
				    ("pdf"
				     :base-directory ,base-directory
				     :base-extension "org"
				     :publishing-directory ,(concat public-directory "docs/pdfs")
				     :exclude "docs"
				     :exclude "Calendario"
				     :exclude ".ipynb_checkpoints"
				     :exclude "reveal.js.old"
				     :exclude "USB"
				     :recursive t
				     :publishing-function org-latex-publish-to-pdf
				     :auto-preamble t
				     :auto-sitemap nil)
				    
				    ("static-html"
				     :base-directory ,base-directory
				     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|txt\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb"
				     :publishing-directory ,(concat public-directory "docs")
				     :exclude "docs"
				     :exclude "Calendario"
				     :exclude ".ipynb_checkpoints"
				     :exclude "reveal.js.old"
				     :exclude "USB"
				     :recursive t
				     :publishing-function org-publish-attachment)

				    ;; ... all the components ...
				    ("scimax-eln" :components ("html" "static-html" "pdf")))))

  (org-publish "scimax-eln" t))
#+END_SRC

#+RESULTS:


* COMMENT slides                                                   :noexport:

[[https://nbconvert.readthedocs.io/en/latest/config_options.html][Configuraci√≥n para nbconvert]] (las slides usan ficheros locales)

# :tangle mycfg.py
#+BEGIN_SRC python 
c = get_config()
c.NbConvertApp.notebooks = ["Lecc01.ipynb",
                            "Lecc02.ipynb",
                            "Lecc03.ipynb",
                            "Lecc04.ipynb",
                            "Lecc05.ipynb",
                            "Lecc06.ipynb"]
c.SlidesExporter.reveal_theme = 'solarized'
c.SlidesExporter.reveal_scroll = True
#+END_SRC

# :tangle custom.css
#+BEGIN_SRC css 
.slides {
  width: 90% !important;
}
#+END_SRC


#+BEGIN_SRC sh :results none
#jupyter nbconvert --config mycfg.py --to notebook
jupyter nbconvert --config mycfg.py --to slides 
#+END_SRC

# omite las celdas de c√≥digo
#+BEGIN_SRC sh :results silent
#jupyter nbconvert --config mycfg.py --to notebook
jupyter nbconvert --config mycfg.py --to slides --no-input
#+END_SRC


# emacs --batch  --eval "(require 'org)(use-package ox-ipynb)" Lecc02.org --funcall ox-ipynb-export-org-file-to-ipynb-file

# emacsclient -e '(progn (switch-to-buffer "my-presentation.org") (org-beamer-export-to-pdf))'

# emacs --batch --load=plugin.el --load=my-funcs.el --eval=my-func file.v

# c.SlidesExporter.reveal_theme = 'beige'
# c.SlidesExporter.SlidesExporter.reveal_number = 'c/t'
# c.SlidesExporter.slideNumber = True
# c.SlidesExporter.reveal_width = 5500
# c.SlidesExporter.reveal_height = 800

#+BEGIN_SRC makefile :noweb no-export :results silent :exports none :tangle OLDmakefile.old
# Directorios
LECCIONES_SRC = ./org-lessons
LECCIONES = ./lecciones
DOCS = ./docs
CUADERNOS = $(DOCS)/CuadernosElectronicos
TRANSPARENCIAS = $(DOCS)/Transparencias

# Patr√≥n para los archivos fuente
SRC_FILES = $(LECCIONES_SRC)/Lecc*.org

# Regla principal
all: notebooksYslides calendario
	emacs -q -l ~/Software/scimax/init.el -batch -nw -l publica.el

calendario: $(DOCS)/Calendario-Econometria-Aplicada.pdf

$(DOCS)/Calendario-Econometria-Aplicada.pdf:
	emacs --batch Calendario/README.org -l org -f org-babel-tangle
	cd Calendario && make Calendario-Econometria-Aplicada.pdf

notebooksYslides: $(patsubst $(LECCIONES_SRC)/%.org,$(CUADERNOS)/%.ipynb,$(wildcard $(SRC_FILES)))

# Regla para generar notebooks y slides
$(CUADERNOS)/%.ipynb $(TRANSPARENCIAS)/%.slides.html: $(LECCIONES_SRC)/%.org
	make directorios 
	make series_formales
	cp -a $(LECCIONES_SRC)/*.bib $(LECCIONES)
	cp -a $< $(LECCIONES)
	emacs -q -l ~/Software/scimax/init.el $(LECCIONES)/$(@F:.ipynb=.org) --batch -f org-babel-execute-buffer --kill
	mv $(LECCIONES)/$(@F:.ipynb=.ipynb) $(CUADERNOS)
	mv $(LECCIONES)/$(@F:.ipynb=.slides.html) $(TRANSPARENCIAS)

series_formales: $(LECCIONES_SRC)/src/implementacion_series_formales.org
	make directorios 
	cp $< $(LECCIONES)/src/
	emacs --batch $(LECCIONES)/src/implementacion_series_formales.org -l org -f org-babel-tangle
	ln -s -r $(LECCIONES)/src/implementacion_series_formales.py $(LECCIONES)/
	cp -a $(LECCIONES)/src/implementacion_series_formales.py $(CUADERNOS)/src/
	ln -s -r $(CUADERNOS)/src/implementacion_series_formales.py $(CUADERNOS)/
	emacs -q -l ~/Software/scimax/init.el -batch -nw --eval "(require 'ox-ipynb)" --eval "(ox-ipynb-export-org-file-to-ipynb-file \"lecciones/src/implementacion_series_formales.org\")"
	jupyter nbconvert --execute --inplace $(LECCIONES)/src/implementacion_series_formales.ipynb
	jupyter nbconvert --config mycfg-GitHubPages.py --to slides --reveal-prefix "https://unpkg.com/reveal.js@5.2.1" --execute $(LECCIONES)/src/implementacion_series_formales.ipynb
	jupyter nbconvert --execute --to html $(LECCIONES)/src/implementacion_series_formales.ipynb
	mv $(LECCIONES)/src/implementacion_series_formales.ipynb $(CUADERNOS)
	mv $(LECCIONES)/src/implementacion_series_formales.slides.html $(TRANSPARENCIAS)
	mv $(LECCIONES)/src/implementacion_series_formales.html $(DOCS)
	touch $@

directorios: 
	mkdir -v -p $(LECCIONES)/src
	mkdir -v -p $(LECCIONES)/img
	mkdir -v -p $(DOCS)/img
	mkdir -v -p $(DOCS)/pdfs
	mkdir -v -p $(TRANSPARENCIAS)
	mkdir -v -p $(CUADERNOS)/src
	ln -s -r $(DOCS)/img/ $(TRANSPARENCIAS)/
	ln -s -r $(DOCS)/img/ $(CUADERNOS)/
	touch directorios

clean:
	rm -r -f $(LECCIONES)

cleanAll: clean
	find $(DOCS)/ -mindepth 1 ! -name 'README.org' -exec rm -rf {} +
	rm -f directorios
	rm -f series_formales

#+END_SRC

* COMMENT basura                                                   :noexport:

Makefile para que sea totalmente compatible con el build.yml que definimos. Los cambios clave son:

Se utiliza emacs --batch con --load ~/.emacs.d/no-tlmgr.el para evitar el problema con tlmgr.

Se asegura que ox-ipynb y ob-jupyter se cargan expl√≠citamente.

Se evita la evaluaci√≥n de bloques autom√°ticamente, salvo en los casos que lo necesitas.

Se mantiene toda tu l√≥gica de directorios, copias, y nbconvert.


$(CUADERNOS)/%.ipynb $(TRANSPARENCIAS)/%.slides.html: $(LECCIONES_SRC)/%.org
	make directorios
	make series_formales
	cp -a $(LECCIONES_SRC)/*.bib $(LECCIONES)
	cp -a $< $(LECCIONES)
	emacs --batch \
	  --load ~/.emacs.d/no-tlmgr.el \
	  --load ~/Software/scimax/init.el \
	  --eval "(setq org-confirm-babel-evaluate nil)" \
	  --eval "(require 'ox-ipynb)" \
	  --eval "(require 'ob-jupyter)" \
	  $(LECCIONES)/$(@F:.ipynb=.org) \
	  -f org-babel-execute-buffer --kill
	mv $(LECCIONES)/$(@F:.ipynb=.ipynb) $(CUADERNOS)
	mv $(LECCIONES)/$(@F:.ipynb=.slides.html) $(TRANSPARENCIAS)

$(CUADERNOS)/%.ipynb $(TRANSPARENCIAS)/%.slides.html: $(LECCIONES_SRC)/%.org
	make directorios
	make series_formales
	cp -a $(LECCIONES_SRC)/*.bib $(LECCIONES)
	cp -a $< $(LECCIONES)
	emacs --batch \
	  --load ~/.emacs.d/no-tlmgr.el \
	  --load ~/Software/scimax/init.el \
	  --eval "(require 'ox-ipynb)" \
	  --eval "(org-babel-execute-buffer)" \
	  $(LECCIONES)/$(@F:.ipynb=.org) \
	  -f org-babel-execute-buffer --kill
	mv $(LECCIONES)/$(@F:.ipynb=.ipynb) $(CUADERNOS)
	mv $(LECCIONES)/$(@F:.ipynb=.slides.html) $(TRANSPARENCIAS)

#	#emacs -q -l ~/Software/scimax/init.el $(LECCIONES)/$(@F:.ipynb=.org) --batch -f org-babel-execute-buffer --kill

#+BEGIN_SRC emacs-lisp :tangle publica.el.old :results silent
(require 'ox-publish)

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF despu√©s de ejecutar los bloques de c√≥digo."
  (with-current-buffer (find-file-noselect filename)
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
				     :base-directory ,base-directory
				     :base-extension "org"
                                     :publishing-directory ,public-directory
				     :exclude "src\\|docs\\|Calendario"
				     :recursive t
				     :publishing-function org-html-publish-to-html
				     :auto-preamble t
				     :auto-sitemap nil)
				    
				    ("pdf"
				     :base-directory ,base-directory
				     :base-extension "org"
				     :publishing-directory ,(concat public-directory "pdfs")
 				     :exclude "src\\|docs\\|Calendario"
				     :recursive t
				     :publishing-function my-org-latex-publish-to-pdf
				     :auto-preamble t
				     :auto-sitemap nil)
				    
				    ("static-html"
				     :base-directory ,base-directory
				     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|txt\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb"
				     :publishing-directory ,public-directory
				     :exclude "src\\|docs\\|Calendario"
				     :recursive t
				     :publishing-function org-publish-attachment)

				    ;; ... all the components ...
				    ("scimax-eln" :components ("html" "static-html" "pdf")))))

  (org-publish "scimax-eln" t))

  ;; Customize the HTML output
  (setq org-html-validation-link nil            ;; Don't show validation link
        org-html-head-include-scripts nil       ;; Use our own scripts
        org-html-head-include-default-style nil ;; Use our own styles
        ;org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />"
   )

  (let* ((base-directory "./")
         (org-export-with-broken-links t)
         (org-publish-project-alist `(("index"
  				     :base-directory ,base-directory
  				     :base-extension "org"
  				     :publishing-directory ,(concat base-directory "docs")
  				     :exclude "docs"
  				     :recursive nil
  				     :publishing-function org-html-publish-to-html
  				     :auto-preamble t
  				     :auto-sitemap t
                                       :with-author nil           ;; Don't include author name
                                       :with-creator nil          ;; Include Emacs and Org versions in footer
                                       :with-toc t                ;; Include a table of contents
                                       :section-numbers nil       ;; Don't include section numbers
                                       :time-stamp-file nil)
  				    
  				    ("static-index"
  				     :base-directory ,base-directory
  				     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|txt\\|svg\\|aiff"
  				     :publishing-directory ,(concat base-directory "docs")
  				     :exclude "docs"
  				     :recursive nil
  				     :publishing-function org-publish-attachment)

  				    ;; ... all the components ...
  				    ;("scimax-eln" :components ("html" "static-html" "pdf")))))
  				    ("web-repositorio" :components ("index" "static-index")))))

    (org-publish "web-repositorio" t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'ox-publish)

(defun my-org-babel-execute-buffer ()
  "Ejecuta todos los bloques de c√≥digo en el buffer actual."
  (org-babel-execute-buffer))

(defun my-org-html-publish-to-html (plist filename pub-dir)
  "Publica un archivo Org como HTML despu√©s de ejecutar los bloques de c√≥digo."
  (with-current-buffer (find-file-noselect filename)
    ;(my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-html-publish-to-html plist filename pub-dir)))

(defun my-org-latex-publish-to-pdf (plist filename pub-dir)
  "Publica un archivo Org como PDF despu√©s de ejecutar los bloques de c√≥digo."
  (with-current-buffer (find-file-noselect filename)
    ;(my-org-babel-execute-buffer) ; Ejecuta los bloques
    (org-latex-publish-to-pdf plist filename pub-dir)))

(let* ((base-directory "./lecciones/")
       (public-directory "./docs/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,public-directory
                                     :exclude ".ipynb_checkpoints\\|00Notas.*\\|org-publisg.*\\|kk.*\\|src"
                                     :recursive t
                                     :auto-preamble t
                                     :auto-sitemap t
				     :sitemap-title "Lecciones"
                                     :publishing-function my-org-html-publish-to-html
    				     :exclude-tags ("pdf"))
                                   
                                    ("pdf"
                                     :base-directory ,base-directory
                                     :base-extension "org"
                                     :publishing-directory ,(concat public-directory "pdfs")
                                     :exclude ".ipynb_checkpoints\\|src\\|sitemap.pdf"
                                     :recursive t
                                     :auto-preamble t
                                     :auto-sitemap nil
                                     :publishing-function my-org-latex-publish-to-pdf)
                                    
                                    ("static-html"
                                     :base-directory ,base-directory
                                     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|svg\\|aiff\\|csv\\|gdt\\|inp\\|ipynb\\|html"
                                     :publishing-directory ,public-directory
                                     :exclude "docs\\|src\\|EjerciciosHide\\|.ipynb_checkpoints\\|org-publisg.*\\|kk.*\\|Lecc*.pdf\\|sitemap.pdf"
                                     :recursive t
                                     :publishing-function org-publish-attachment)

                                    ("scimax-eln" :components ("html" "static-html" "pdf")))))

  (org-publish "scimax-eln" t))

  ;; Customize the HTML output
  (setq org-html-validation-link nil            ;; Don't show validation link
        org-html-head-include-scripts nil       ;; Use our own scripts
        org-html-head-include-default-style nil ;; Use our own styles
        org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />")

  (let* ((base-directory "./")
         (org-export-with-broken-links t)
         (org-publish-project-alist `(("index"
  				     :base-directory ,base-directory
  				     :base-extension "org"
  				     :publishing-directory ,(concat base-directory "docs")
  				     :exclude "docs\\|org-publisg.org\\|chatCopilot.org"
  				     :recursive nil
  				     :publishing-function org-html-publish-to-html
  				     :auto-preamble t
  				     :auto-sitemap t
                                       :with-author nil           ;; Don't include author name
                                       :with-creator nil          ;; Include Emacs and Org versions in footer
                                       :with-toc t                ;; Include a table of contents
                                       :section-numbers nil       ;; Don't include section numbers
                                       :time-stamp-file nil)
  				    
  				    ("static-index"
  				     :base-directory ,base-directory
  				     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|txt\\|svg\\|aiff"
  				     :publishing-directory ,(concat base-directory "docs")
  				     :exclude "docs\\|org-publisg.org\\|chatCopilot.org"
  				     :recursive nil
  				     :publishing-function org-publish-attachment)

  				    ;; ... all the components ...
  				    ;("scimax-eln" :components ("html" "static-html" "pdf")))))
  				    ("web-repositorio" :components ("index" "static-index")))))

    (org-publish "web-repositorio" t))

#+END_SRC

#+RESULTS:

